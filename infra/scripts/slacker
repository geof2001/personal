#!/usr/local/bin/python
from slackclient import SlackClient
import argparse
from argparse import RawTextHelpFormatter
import signal
import time
import os

import boto3

PARSER = argparse.ArgumentParser(description='CLI Slack client for issuing test commands or sending messages to a channel',    formatter_class=RawTextHelpFormatter, epilog='Posting a comment to a channel:\n\t./slacker -u @jscott -c sr-all -t "Hi everyone!"\n\nRun a command with parameters in a channel:\n\t./slacker -u @jscott -c #sr-programming -s /bud -t "deploy help"')
PARSER.add_argument('-u', '--user', metavar='', default='', help='Slack User ID, @username or user@roku.com')
PARSER.add_argument('-c', '--channel', metavar='', default='', help='Slack channel ID or #channel-name to post to.')
PARSER.add_argument('-t', '--text', metavar='', default='', help='If you are simply posting to a channel \nprovide text in quotes here.  If you are issuing a \ncommand with -s then provide the parameters to \nyour /command here.')
PARSER.add_argument('-s', '--slash', metavar='', default='', help="Slack slash command you want to run. \nMake sure to prefix it with a '/'.")

args = PARSER.parse_args()

def get_slack_token():
      try:
            session = boto3.setup_default_session(profile_name='638782101961', region_name='us-west-2')
      except Exception, ex:
            print('Permissions could not be established.  Verify you have a ' \
                  'profile with the DEV account ID configured. {}'.format(ex))
            exit(1)
      
      ssm_client = boto3.client('ssm')
      token = ssm_client.get_parameter(Name='bud_dev_slack_token', WithDecryption=True)
      return token['Parameter']['Value']

token = get_slack_token()
# print('Token was: {}'.format(token))
slack_client = SlackClient(token)

# try:
#   slack_token = os.environ["SLACK_API_TOKEN"]
#   slack_client = SlackClient(slack_token)
# except Exception, exc:
#   print('You need to setup your SLACK_API_TOKEN.  Seek help!  ' \
#       'Also this happened: {}'.format(exc))
#   exit(1)


user = args.user
channel = args.channel
text = args.text
slash_cmd = args.slash
    
# print('u pre strip: ', u)
user=user.lstrip('@@')
user=user.split('@')[0]
# print('u post strip: ', user)

user_id=''
if user.upper() == user:
      # print('You provided the users SlackID.  Very Good.')
      user_id=user
else:
      users = slack_client.api_call('users.list')
      for member in users['members']:
        if member['name'] == user:
              user_id = member['id']
            #   print('Found user ID: {} for user {}'.format(user_id,user))

# print('c pre strip: ',c)
channel = channel.lstrip('##')
channel = channel.lstrip('@@')
# print('c post strip: ', channel)

channel_id=''
if channel.upper() == channel:
      # print('You will be posting to channel ID: {}'.format(channel))
      channel_id=channel
else:
      channels = slack_client.api_call("channels.list", exclude_archived=1)
      for chan in channels['channels']:
        if chan['name'] == channel:
              channel_id = chan['id']
              # print(c,cid)
            #   print('The channel ID for channel {} is: {}'.format(channel,channel_id))

if args.text and not args.slash:
      print('Sending message "{}" to channel "{}".'.format(text,channel_id))
      response = slack_client.api_call(
        "chat.postEphemeral",
        channel=channel_id,
        text=text,
        user=user_id,
        token=token
        )

if args.slash:
      print("Sending command to {}: {} {}".format(channel,args.slash,text))
      try:
            response = slack_client.api_call(
                        "chat.command",
                        channel=channel_id,
                        command=slash_cmd,
                        text=text,
                        token=token
                        )
      except Exception as e:
            print('Issue with pushing to slack: {}'.format(e))
# print(response)

