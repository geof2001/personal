Description: SlackBud statck. Creates all the resources used by SlackBud in a CF template.

Resources:

  LambdaFunctionZipFilesS3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: "sr-infra-lambda-function-zipfiles"

  ServerlessDeploymentBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: "sr-infra-lambda-serverless-deploy-bucket"

  DeployConfigTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: DeployConfig
      AttributeDefinitions:
      - AttributeName: serviceName
        AttributeType: S
      KeySchema:
      - AttributeName: serviceName
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1 

  SlackBudEusersTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: SlackBudUsers
      AttributeDefinitions:
      - AttributeName: userid
        AttributeType: S
      KeySchema:
      - AttributeName: userid
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  ServiceInfoTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: ServiceInfo
      AttributeDefinitions:
      - AttributeName: serviceName
        AttributeType: S
      KeySchema:
      - AttributeName: serviceName
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  # TODO: Add automatic backup when avail in CF templates

  SlackBudSessionTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: SlackBudSession
      AttributeDefinitions:
      - AttributeName: slackBudSessionId
        AttributeType: S
      KeySchema:
      - AttributeName: slackBudSessionId
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  RepoInfoTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: RepoInfo
      AttributeDefinitions:
      - AttributeName: repo
        AttributeType: S
      KeySchema:
      - AttributeName: repo
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  # TODO: Add automatic backup when avail in CF templates

# TODO:  Scaled back to what is in git-diff lambda
  SlackBudLambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - lambda:*
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - ec2:CreateNetworkInterface
            - ec2:DescribeNetworkInterfaces
            - ec2:DeleteNetworkInterface
            Effect: Allow
            Resource: '*'
          - Action:
            - dynamodb:Describe*
            - dynamodb:List*
            - dynamodb:Update*
            - dynamodb:Get*
            - dynamodb:PutItem
            - dynamodb:DeleteItem
            - dynamodb:BatchGetItem
            - dynamodb:BatchWriteItem
            - dynamodb:Query
            - dynamadb:Scan
            Effect: Allow
            Resource: '*'
          - Action:
            - es:*
            Effect: Allow
            Resource: 'arn:aws:es:us-west-2:661796028321:*'
          - Action:
            - sts:AssumeRole
            - iam:GetRole
            - iam:PassRole
            Effect: Allow
            Resource: '*'
          - Action:
            - route53:Change*
            - route53:Create*
            - route53:DeleteTraffic*
            - route53:DeleteHealthCheck
            - route53:Get*
            - route53:List*
            - route53:Test*
            - route53:Update*
            Effect: Allow
            Resource: '*'
          - Action:
            - s3:*
            Effect: Allow
            Resource:
              - 'arn:aws:s3:::sr-infra-lambda-function-zipfiles'
              - 'arn:aws:s3:::sr-infra-lambda-function-zipfiles/*'
          Version: '2012-10-17'
        PolicyName: slack-bud-lambda-policy


  MultiregionServiceDNSLambda:
    DependsOn: SlackBudLambdaExecutionRole
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref LambdaFunctionZipFilesS3Bucket
        S3Key: "slack-bud-output/slack-bud-lambda.zip"
      Handler: dns_updater.multiregion_dns_update_handler
      Role: !GetAtt SlackBudLambdaExecutionRole.Arn
      Runtime: python2.7
      Timeout: '30'


  DNSTableToLambdaTrigger:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      EventSourceArn:
        Fn::GetAtt:
        - MultiregionServiceDNSTable
        - StreamArn
      FunctionName:
        Fn::GetAtt:
          - "MultiregionServiceDNSLambda"
          - "Arn"
      StartingPosition: "TRIM_HORIZON"


  ## Starting section for multi-region DNS management
  ## DynamoDB.
  MultiregionServiceDNSTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: MultiregionServiceDnsState
      StreamSpecification:
        StreamViewType: NEW_IMAGE
      AttributeDefinitions:
      - AttributeName: key
        AttributeType: S
      KeySchema:
      - AttributeName: key
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  ElasticsearchEventRecorderDomain: 
    Type: "AWS::Elasticsearch::Domain"
    Properties:
      DomainName: "event-recorder"
      ElasticsearchClusterConfig: 
        DedicatedMasterEnabled: "true"
        InstanceCount: "3"
        ZoneAwarenessEnabled: "false"
        InstanceType: "m4.large.elasticsearch"
        DedicatedMasterType: "m4.large.elasticsearch"
        DedicatedMasterCount: "3"
      EBSOptions: 
        EBSEnabled: true
        VolumeSize: 20
        VolumeType: "gp2"
      SnapshotOptions: 
        AutomatedSnapshotStartHour: "0"
      AccessPolicies: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              AWS: "*"
            Action: "es:*"
            Resource: "*"
            Condition: 
              IpAddress:
                aws:SourceIp:
                    - 50.224.7.192/26
                    - 50.224.7.64/26
                    - 50.224.7.32/27
                    - 50.224.7.128/26
                    - 52.8.254.63/32
                    - 216.38.147.4/32
                    - 52.40.46.133/32
                    - 52.39.183.45/32
      AdvancedOptions: 
        rest.action.multi.allow_explicit_index: "true"
      ElasticsearchVersion: 6.0

Outputs:
  S3DeploymentZipFileBucketName:
    Value: !Ref LambdaFunctionZipFilesS3Bucket
    Description: Name of S3 bucket which as lambda code zip files
    Export:
      Name: !Sub ${AWS::StackName}-S3DeploymentZipFileBucketName

  S3ServerlessFrameworkBucketName:
    Value: !Ref ServerlessDeploymentBucket
    Description: Name of S3 bucket used by serverless framework
    Export:
      Name: !Sub ${AWS::StackName}-S3ServerlessFrameworkBucketName
