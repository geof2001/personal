Description: Template specifying the configuration of Batch and Service ECS clusters

Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
    - Label:
        default: DNS Weight for this stack
      Parameters:
      - StackDNSWeight
    - Label:
        default: Service Images - (empty image=no service)
      Parameters:
      - DevnullImage
    - Label:
        default: Task counts
      Parameters:
      - GatewayCount
    - Label:
        default: Stack Dependencies
      Parameters:
      - NetworkStackName
      - DataStackName
      - SearchDataStackName
    - Label:
        default: Service Cluster Configuration
      Parameters:
      - MinServiceClusterSize
      - MaxServiceClusterSize
      - MinServiceInstancesInService
      - ServiceClusterRollSize
    # - Label:
    #     default: Batch Cluster Configuration
    #   Parameters:
    #   - MinBatchClusterSize
    #   - MaxBatchClusterSize
    #   - BatchClusterRollSize
    - Label:
        default: HAProxy Cluster Configuration
      Parameters:
      - HAProxyMinSize
    - Label:
        default: SSL Configuration
      Parameters:
      - SSLKey

Conditions:
  DeployEastRegionOnly: !Equals [!Ref "AWS::Region", 'us-east-1']
  DeployMultiRegion: !Or
    - !Equals [!Ref "AWS::Region", 'us-east-1']
    - !Equals [!Ref "AWS::Region", 'us-west-2']
  DeployDevnull: !And
    - !Condition DeployEastRegionOnly
    - !Not [!Equals [!Ref DevnullImage, '']]
  DeployDatafetcher: !And
    - !Condition DeployEastRegionOnly
    - !Or
      - !Equals [!Ref "AWS::AccountId", '638782101961']
      - !Equals [!Ref "AWS::AccountId", '181133766305']
      - !Equals [!Ref "AWS::AccountId", '886239521314']
  LoadTestELBDeploy: !Or 
    - !Equals [!Ref "AWS::AccountId", '638782101961']
    - !Equals [!Ref "AWS::AccountId", '181133766305']
  CreateDevResources: !Equals [!Ref "AWS::AccountId", '638782101961']
  CreateDevAndQAResources: !Or
    - !Equals [!Ref "AWS::AccountId", '638782101961']
    - !Equals [!Ref "AWS::AccountId", '181133766305']

Parameters:
  EsStackName:
    Default: sr-es
    Description: Elasticsearch stack name
    Type: String
  # BatchClusterRollSize:
  #   Default: '1'
  #   Description: Number of instances to roll at a time during an upgrade of batch cluster
  #   Type: String
  DatafetcherClusterRollSize:
    Default: '1'
    Description: Number of instances to roll at a time during an upgrade of Datafetcher cluster
    Type: String
  DataStackName:
    AllowedPattern: \S+
    Default: sr-data
    Description: Name of data stack
    Type: String
  SearchDataStackName:
    AllowedPattern: \S+
    Default: sr-search
    Description: Name of data stack
    Type: String
  DevnullImage:
    Default: ''
    Description: Image for Devnull service
    Type: String
  HAProxyMinSize:
    Default: 3
    Description: Minimum count for HA Proxy instances
    Type: Number
  ServiceClusterScaleUpThreshold:
    Default: 1
    Type: Number
    Description: Minimum threshold of instances free to scale up
  ServiceClusterScaleDownThreshold:
    Default: 2
    Type: Number
    Description: Max threshold of instances free to scale down
  # MaxBatchClusterSize:
  #   Default: '6'
  #   Description: Max size for ECS Batch Cluster
  #   Type: String
  MaxDatafetcherClusterSize:
    Default: '2'
    Description: Min size for Datafetcher cluster
    Type: String
  MaxServiceClusterSize:
    Default: '12'
    Description: Max size for ECS Service Cluster
    Type: String
  # MinBatchClusterSize:
  #   Default: '1'
  #   Description: Min size for ECS Batch Cluster
  #   Type: String
  MinDatafetcherClusterSize:
    Default: '1'
    Description: Min size for Datafetcher cluster
    Type: String
  MinServiceClusterSize:
    Default: '3'
    Description: Min size for ECS Service Cluster
    Type: String
  NetworkStackName:
    AllowedPattern: \S+
    Default: roku-network
    Description: Name of network stack
    Type: String
  AthenaPartitionLoaderStackName:
    Type: String
    Description: Name of athena partition loader stack (without the suffix -dev/-qa/-prod etc)
    Default: athena-partition-loader
    AllowedPattern: \S+
  SSLKey:
    AllowedPattern: \S+
    Description: Name of SSL Key entry in DynamoDB for external proxy
    Type: String
  ServiceClusterRollSize:
    Default: '1'
    Description: Number of instances to roll at a time during an upgrade of service
      cluster
    Type: String
  StackDNSWeight:
    Default: 100
    Description: DNS Weight for this stack
    Type: Number

Mappings:
  AccountMap:
    '638782101961':
      awscert: "14a96f17-ba24-4e0f-a1b3-a317f76a0e0e"
      name: dev.
      env: .dev.sr.roku.com
      serviceecsboot: 20180205-jenkins-190
      datafetcherecsboot: 20180205-jenkins-190
      haproxyboot: 20180205-jenkins-190
      registrar: 638782101961.dkr.ecr.us-east-1.amazonaws.com/registrar:master-db7ccaf-20180404-6846
      extgateway: 638782101961.dkr.ecr.us-east-1.amazonaws.com/gateway:master-c469f1b-20170926-4570
      intgateway: 638782101961.dkr.ecr.us-east-1.amazonaws.com/gateway:master-c469f1b-20170926-4570
      xray: 638782101961.dkr.ecr.us-east-1.amazonaws.com/x-ray:xray-2x-20171018-7

    '181133766305':
      awscert: "96439d78-b962-45ce-9c96-5f37b47b918b"
      name: qa.
      env: .qa.sr.roku.com
      serviceecsboot: 20180205-jenkins-190
      datafetcherecsboot: 20180205-jenkins-190
      haproxyboot: 20180205-jenkins-190
      registrar: 638782101961.dkr.ecr.us-east-1.amazonaws.com/registrar:master-db7ccaf-20180404-6846
      extgateway: 638782101961.dkr.ecr.us-east-1.amazonaws.com/gateway:master-c469f1b-20170926-4570
      intgateway: 638782101961.dkr.ecr.us-east-1.amazonaws.com/gateway:master-c469f1b-20170926-4570
      xray: 638782101961.dkr.ecr.us-east-1.amazonaws.com/x-ray:xray-2x-20171018-7

    '886239521314':
      awscert: "59dd02c9-33b9-4c66-b078-8d057fee3a7f"
      name: ''
      env: .sr.roku.com
      serviceecsboot: 20180205-jenkins-190
      datafetcherecsboot: 20180205-jenkins-190
      haproxyboot: 20180205-jenkins-190
      registrar: 638782101961.dkr.ecr.us-east-1.amazonaws.com/registrar:master-db7ccaf-20180404-6846
      extgateway: 638782101961.dkr.ecr.us-east-1.amazonaws.com/gateway:master-c469f1b-20170926-4570
      intgateway: 638782101961.dkr.ecr.us-east-1.amazonaws.com/gateway:master-c469f1b-20170926-4570
      xray: 638782101961.dkr.ecr.us-east-1.amazonaws.com/x-ray:xray-2x-20171018-7

  ECSAMIMap:
    us-east-1:
      '638782101961': ami-a7a242da #amzn-ami-2017.09.i-amazon-ecs-optimized
      '181133766305': ami-a7a242da #amzn-ami-2017.09.i-amazon-ecs-optimized
      '886239521314': ami-a7a242da #amzn-ami-2017.09.i-amazon-ecs-optimized

    'us-west-2':
      '638782101961': ami-92e06fea #amzn-ami-2017.09.i-amazon-ecs-optimized
      '181133766305': ami-92e06fea #amzn-ami-2017.09.i-amazon-ecs-optimized
      '886239521314': ami-92e06fea #amzn-ami-2017.09.i-amazon-ecs-optimized

    'eu-west-1':
      '638782101961': ami-0693ed7f #amzn-ami-2017.09.i-amazon-ecs-optimized
      '181133766305': ami-0693ed7f #amzn-ami-2017.09.i-amazon-ecs-optimized
      '886239521314': ami-0693ed7f #amzn-ami-2017.09.i-amazon-ecs-optimized

  HAProxyAMIMap:
    us-east-1:
      '638782101961': ami-97785bed
      '181133766305': ami-97785bed
      '886239521314': ami-97785bed

    'us-west-2':
      '638782101961': ami-f2d3638a
      '181133766305': ami-f2d3638a
      '886239521314': ami-f2d3638a

    'eu-west-1':
      '638782101961': ami-d834aba1
      '181133766305': ami-d834aba1
      '886239521314': ami-d834aba1

  CertMap:
    us-east-1:
      '638782101961': "14a96f17-ba24-4e0f-a1b3-a317f76a0e0e"
      '181133766305': "96439d78-b962-45ce-9c96-5f37b47b918b"
      '886239521314': "5bffba9c-526b-4322-9110-02beca339713"
    us-west-2:
      '638782101961': "34b996d2-d9d8-464a-bc4c-f3b2077aad6a"
      '886239521314': "0f2d0196-2c25-47bd-8d85-af47cb866200"

  RokuCertMap:
    us-east-1:
      '638782101961': "f23a9234-8d38-4ed7-be58-de00c029f907"
      '181133766305': "45b2c490-8051-459d-9f13-e451725485bd"
      '886239521314': "c2b8b5d3-4d12-4347-9dc4-4689579d6317"
    us-west-2:
      '638782101961': "19cac4d5-9c53-48b9-ab94-1a3a45e974f0"
      '886239521314': "0f2d0196-2c25-47bd-8d85-af47cb866200"
  
  RegionLookupMap:
    us-east-1:
      '638782101961': '638782101961.us-east-1'
      '181133766305': '181133766305.us-east-1'
      '886239521314': '886239521314.us-east-1'
    us-west-2:
      '638782101961': '638782101961.us-west-2'
      '181133766305': '181133766305.us-west-2'
      '886239521314': '886239521314.us-west-2'

  RegionMap:
    638782101961.us-east-1:
      ServiceDiscoveryMaxWriteCapacity: '100'
      ServiceDiscoveryWriteCapacity: '30'
      ServiceDiscoveryMaxReadCapacity: '400'
      ServiceDiscoveryReadCapacity: '100'
    638782101961.us-west-2:
      ServiceDiscoveryMaxWriteCapacity: '100'
      ServiceDiscoveryWriteCapacity: '30'
      ServiceDiscoveryMaxReadCapacity: '400'
      ServiceDiscoveryReadCapacity: '100'
    181133766305.us-east-1:
      ServiceDiscoveryMaxWriteCapacity: '100'
      ServiceDiscoveryWriteCapacity: '30'
      ServiceDiscoveryMaxReadCapacity: '400'
      ServiceDiscoveryReadCapacity: '100'
    181133766305.us-west-2:
      ServiceDiscoveryMaxWriteCapacity: '100'
      ServiceDiscoveryWriteCapacity: '30'
      ServiceDiscoveryMaxReadCapacity: '400'
      ServiceDiscoveryReadCapacity: '100'
    886239521314.us-east-1:
      ServiceDiscoveryMaxWriteCapacity: '200'
      ServiceDiscoveryWriteCapacity: '30'
      ServiceDiscoveryMaxReadCapacity: '3000'
      ServiceDiscoveryReadCapacity: '400'
    886239521314.us-west-2:
      ServiceDiscoveryMaxWriteCapacity: '200'
      ServiceDiscoveryWriteCapacity: '30'
      ServiceDiscoveryMaxReadCapacity: '3000'
      ServiceDiscoveryReadCapacity: '400'

Resources:
  API2IntDNSRecord:
    Type: "AWS::Route53::RecordSet"
    Properties:
      AliasTarget:
        DNSName: !GetAtt ExtAppLoadBalancer.DNSName
        EvaluateTargetHealth: false
        HostedZoneId: !GetAtt ExtAppLoadBalancer.CanonicalHostedZoneID
      Comment: DNS name for jwt token ext gateway
      HostedZoneName: !Join ['', [!FindInMap [AccountMap, !Ref "AWS::AccountId", name], sr.roku.com.]]
      Name: !Join ['', [api2-int-, !Ref "AWS::Region", '.', !FindInMap [AccountMap,!Ref "AWS::AccountId", name], sr.roku.com. ]]
      Type: A

  APIDNSRecord:
    Type: "AWS::Route53::RecordSet"
    Properties:
      AliasTarget:
        DNSName: !GetAtt ExtHAProxyLoadBalancer.DNSName
        EvaluateTargetHealth: false
        HostedZoneId: !GetAtt ExtHAProxyLoadBalancer.CanonicalHostedZoneNameID
      Comment: DNS name for ext gateway
      HostedZoneName: !Join ['', [!FindInMap [AccountMap, !Ref "AWS::AccountId", name], sr.roku.com. ]]
      Name: !Join ['', [api-, !Ref "AWS::StackName", '-', !Ref "AWS::Region", '.', !FindInMap [AccountMap,!Ref "AWS::AccountId", name], sr.roku.com. ]]
      Type: A

  APIWeightedDNSRecord:
    Type: "AWS::Route53::RecordSet"
    Properties:
      AliasTarget:
        DNSName: !GetAtt ExtHAProxyLoadBalancer.DNSName
        EvaluateTargetHealth: false
        HostedZoneId: !GetAtt ExtHAProxyLoadBalancer.CanonicalHostedZoneNameID
      Comment: Weighted DNS entry for ext gateway
      HostedZoneName: !Join ['', [!FindInMap [AccountMap, !Ref "AWS::AccountId", name], sr.roku.com. ]]
      Name: !Join ['', [api-, !Ref "AWS::Region", '.', !FindInMap [AccountMap,!Ref "AWS::AccountId", name], sr.roku.com. ]]
      SetIdentifier: !Join ['', [api-, !Ref "AWS::StackName", '-', !Ref "AWS::Region"]]
      Type: A
      Weight: !Ref StackDNSWeight

  BookmarksAPIDNSRecord:
    Type: "AWS::Route53::RecordSet"
    Properties:
      AliasTarget:
        DNSName: !GetAtt ExtBookmarksLoadBalancer.DNSName
        EvaluateTargetHealth: false
        HostedZoneId: !GetAtt ExtBookmarksLoadBalancer.CanonicalHostedZoneID
      Comment: DNS name for ext gateway
      HostedZoneName: !Join ['', [!FindInMap [AccountMap, !Ref "AWS::AccountId", name], sr.roku.com. ]]
      Name: !Join ['', [bookmarks-, !Ref "AWS::Region", '.', !FindInMap [AccountMap,!Ref "AWS::AccountId", name], sr.roku.com. ]]
      Type: A

  TFSAPIDNSRecord:
    Type: "AWS::Route53::RecordSet"
    Condition: DeployEastRegionOnly
    Properties:
      AliasTarget:
        DNSName: !GetAtt ExtTFSLoadBalancer.DNSName
        EvaluateTargetHealth: false
        HostedZoneId: !GetAtt ExtTFSLoadBalancer.CanonicalHostedZoneID
      Comment: DNS name for ext gateway
      HostedZoneName: !Join ['', [!FindInMap [AccountMap, !Ref "AWS::AccountId", name], sr.roku.com. ]]
      Name: !Join ['', [tfs-, !Ref "AWS::Region", '.', !FindInMap [AccountMap,!Ref "AWS::AccountId", name], sr.roku.com. ]]
      Type: A

  ContentIntAPIDNSRecord:
    Type: "AWS::Route53::RecordSet"
    Properties:
      AliasTarget:
        DNSName: !GetAtt ContentLoadBalancer.DNSName
        EvaluateTargetHealth: false
        HostedZoneId: !GetAtt ContentLoadBalancer.CanonicalHostedZoneID
      Comment: DNS name for content service origin
      HostedZoneName: !Join ['', [!FindInMap [AccountMap, !Ref "AWS::AccountId", name], sr.roku.com. ]]
      Name: !Join ['', [content-int-, !Ref "AWS::Region", '.', !FindInMap [AccountMap,!Ref "AWS::AccountId", name], sr.roku.com. ]]
      Type: A

  ContentQCAPIDNSRecord:
    Type: "AWS::Route53::RecordSet"
    Condition: DeployEastRegionOnly
    Properties:
      AliasTarget:
        DNSName: !GetAtt ContentQCLoadBalancer.DNSName
        EvaluateTargetHealth: false
        HostedZoneId: !GetAtt ContentQCLoadBalancer.CanonicalHostedZoneID
      Comment: DNS name for content service origin
      HostedZoneName: !Join ['', [!FindInMap [AccountMap, !Ref "AWS::AccountId", name], sr.roku.com. ]]
      Name: !Join ['', [content-qc, '.', !FindInMap [AccountMap,!Ref "AWS::AccountId", name], sr.roku.com. ]]
      Type: A

  ImagesAPIDNSRecord:
    Type: "AWS::Route53::RecordSet"
    Properties:
      AliasTarget:
        DNSName: !GetAtt ExtImagesLoadBalancer.DNSName
        EvaluateTargetHealth: false
        HostedZoneId: !GetAtt ExtImagesLoadBalancer.CanonicalHostedZoneID
      Comment: DNS name for images service origin with redirect from s3
      HostedZoneName: !Join ['', [!FindInMap [AccountMap, !Ref "AWS::AccountId", name], sr.roku.com. ]]
      Name: !Join ['', [images-svc-, !Ref "AWS::Region", '.', !FindInMap [AccountMap,!Ref "AWS::AccountId", name], sr.roku.com. ]]
      Type: A

  APILoadTestDNSRecord:
    Type: "AWS::Route53::RecordSet"
    Condition: LoadTestELBDeploy
    Properties:
      AliasTarget:
        DNSName: !GetAtt LoadTestHAProxyLoadBalancer.DNSName
        EvaluateTargetHealth: false
        HostedZoneId: !GetAtt LoadTestHAProxyLoadBalancer.CanonicalHostedZoneNameID
      Comment: DNS name for ext gateway for load test
      HostedZoneName: !Join ['', [!FindInMap [AccountMap, !Ref "AWS::AccountId", name], sr.roku.com. ]]
      Name: !Join ['', [ltapi-, !Ref "AWS::StackName", '-', !Ref "AWS::Region", '.', !FindInMap [AccountMap,!Ref "AWS::AccountId", name], sr.roku.com. ]]
      Type: A

  APILoadTestWeightedDNSRecord:
    Type: "AWS::Route53::RecordSet"
    Condition: LoadTestELBDeploy
    Properties:
      AliasTarget:
        DNSName: !GetAtt LoadTestHAProxyLoadBalancer.DNSName
        EvaluateTargetHealth: false
        HostedZoneId: !GetAtt LoadTestHAProxyLoadBalancer.CanonicalHostedZoneNameID
      Comment: Weighted DNS entry for ext gateway for load test
      HostedZoneName: !Join ['', [!FindInMap [AccountMap, !Ref "AWS::AccountId", name], sr.roku.com. ]]
      Name: !Join ['', [ltapi-, !Ref "AWS::Region", '.', !FindInMap [AccountMap,!Ref "AWS::AccountId", name], sr.roku.com. ]]
      SetIdentifier: !Join ['', [ltapi-, !Ref "AWS::StackName", '-', !Ref "AWS::Region"]]
      Type: A
      Weight: !Ref StackDNSWeight

  SearchIntDNSRecord:
    Type: "AWS::Route53::RecordSet"
    Properties:
      AliasTarget:
        DNSName: !GetAtt SearchAppLoadBalancer.DNSName
        EvaluateTargetHealth: false
        HostedZoneId: !GetAtt SearchAppLoadBalancer.CanonicalHostedZoneID
      Comment: DNS name for direct access to search ELB in a region
      HostedZoneName: !Join ['', [!FindInMap [AccountMap, !Ref "AWS::AccountId", name], sr.roku.com.]]
      Name: !Join ['', [search-int-, !Ref "AWS::Region", '.', !FindInMap [AccountMap,!Ref "AWS::AccountId", name], sr.roku.com. ]]
      Type: A

  DatafetcherECSCluster:
    Type: "AWS::ECS::Cluster"
    Condition: DeployDatafetcher

  DatafetcherECSHighMemoryReservationAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Condition: DeployDatafetcher
    Properties:
      AlarmActions:
      - Ref: DatafetcherECSScaleUpPolicy
      AlarmDescription: Alarm if memory reservation on the Datafetcher cluster is high so
        it can be scaled up
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: ClusterName
        Value: !Ref DatafetcherECSCluster
      EvaluationPeriods: '1'
      MetricName: MemoryReservation
      Namespace: AWS/ECS
      Period: '60'
      Statistic: Average
      Threshold: '50'

  DatafetcherECSLowMemoryReservationAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Condition: DeployDatafetcher
    Properties:
      AlarmActions:
      - Ref: DatafetcherECSScaleDownPolicy
      AlarmDescription: Alarm if memory reservation on the Datafetcher cluster is low so
        it can be scaled down
      ComparisonOperator: LessThanThreshold
      Dimensions:
      - Name: ClusterName
        Value: !Ref DatafetcherECSCluster
      EvaluationPeriods: '15'
      MetricName: MemoryReservation
      Namespace: AWS/ECS
      Period: '120'
      Statistic: Average
      Threshold: '30'

  DatafetcherECSScaleDownPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Condition: DeployDatafetcher
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref DatafetcherECSASG
      PolicyType: StepScaling
      EstimatedInstanceWarmup: 300
      StepAdjustments:
        -
          MetricIntervalUpperBound: 0
          ScalingAdjustment: -1

  DatafetcherECSScaleUpPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Condition: DeployDatafetcher
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref DatafetcherECSASG
      Cooldown: '300'
      ScalingAdjustment: '1'
  
  DatafetcherECSHealthCheckELB:
    Type: "AWS::ElasticLoadBalancing::LoadBalancer"
    Condition: DeployDatafetcher
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub "${NetworkStackName}-PeeringWithDEASubnetA"
        - Fn::ImportValue: !Sub "${NetworkStackName}-PeeringWithDEASubnetB"
      HealthCheck:
        Target: HTTP:8000/healthcheck
        HealthyThreshold: '3'
        UnhealthyThreshold: '10'
        Interval: '27'
        Timeout: '5'
      Listeners:
      - InstancePort: '9000'
        LoadBalancerPort: '80'
        Protocol: HTTP
      Scheme: internal
      SecurityGroups:
        - Fn::ImportValue: !Sub "${NetworkStackName}-InstanceSecurityGroup"
      Tags:
      - Key: Department
        Value: SR
      - Key: Spend_Category
        Value: cap
            
  DatafetcherECSASG:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Condition: DeployDatafetcher
    DependsOn:
    - ServiceDiscoveryTable
    - ServiceDiscoveryChangeCountersTable
    - GlobalServiceDiscoveryTable
    Properties:
      AvailabilityZones:
      - Fn::ImportValue: !Sub "${NetworkStackName}-AZ1"
      - Fn::ImportValue: !Sub "${NetworkStackName}-AZ2"
      Cooldown: '30'
      HealthCheckGracePeriod: 600
      HealthCheckType: ELB
      LoadBalancerNames:
        - Ref: "DatafetcherECSHealthCheckELB"
      LaunchConfigurationName: !Ref DatafetcherECSLaunchConfig
      MaxSize: !Ref MaxDatafetcherClusterSize
      MetricsCollection:
      - Granularity: 1Minute
      MinSize: !Ref MinDatafetcherClusterSize
      Tags:
      - Key: Name
        Value: ECS-Datafetcher-Cluster
        PropagateAtLaunch: 'true'
      - Key: Department
        Value: SR
        PropagateAtLaunch: 'true'
      - Key: Spend_Category
        Value: cap
        PropagateAtLaunch: 'true'
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${NetworkStackName}-PeeringWithDEASubnetA"
        - Fn::ImportValue: !Sub "${NetworkStackName}-PeeringWithDEASubnetB"
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: !Ref DatafetcherClusterRollSize
        PauseTime: PT15M
        MinSuccessfulInstancesPercent: 80
        WaitOnResourceSignals: true

  DatafetcherECSLaunchConfig:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Condition: DeployDatafetcher
    DependsOn:
    - RegistrarLogGroup
    - IntGatewayLogGroup
    Properties:
      AssociatePublicIpAddress: 'false'
      BlockDeviceMappings:
      - DeviceName: /dev/xvda
        Ebs:
          VolumeSize: '60'
          VolumeType: gp2
      EbsOptimized: 'false'
      IamInstanceProfile:
        Fn::ImportValue: !Sub "${NetworkStackName}-InstanceProfile"
      ImageId: !FindInMap [ECSAMIMap, !Ref "AWS::Region", !Ref "AWS::AccountId"]
      InstanceMonitoring: 'true'
      InstanceType: m4.large
      SecurityGroups:
      - Fn::ImportValue: !Sub "${NetworkStackName}-InstanceSecurityGroup"
      UserData:
        "Fn::Base64":
          !Sub
            - |-
              #!/bin/sh
              set -x
              echo ECS_CLUSTER=${DatafetcherECSCluster} >> /etc/ecs/ecs.config
              export CLOUD_APP=ecs
              export EFS_ID=${efsid}
              export AWS_REGION=${regionid}
              yum update --exclude=ecs-init --exclude=docker --exclude=docker-devel --exclude=docker-pkg-devel -y
              yum install -y aws-cli openssl-devel nfs-utils amazon-ssm-agent
              export ECS_BOOT_VERSION=${boot}
              export SERVICE_DISCOVERY_TABLE=${ServiceDiscoveryTable}
              export SERVICE_DISCOVERY_COUNTER_TABLE=${ServiceDiscoveryChangeCountersTable}
              export REGISTRAR_IMG=${registrar}
              export GATEWAY_IMG=${gateway}
              export XRAY_IMG=${xray}
              echo '* hard nofile 100000' | tee -a /etc/security/limits.conf
              echo '* soft nofile 100000' | tee -a /etc/security/limits.conf
              ulimit -n 100000
              aws s3 cp --quiet --recursive s3://roku-ecs-boot/$ECS_BOOT_VERSION/  /usr/local/bin/
              chmod u+rx /usr/local/bin/*.sh /usr/local/bin/*.py
              start amazon-ssm-agent
              /usr/local/bin/initialize_ecs_at_startup.sh 2>&1 >> /tmp/initialize_ecs_at_startup.log
              /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource DatafetcherECSASG --region ${AWS::Region}
            -
              boot: !FindInMap [AccountMap, !Ref "AWS::AccountId", datafetcherecsboot]
              registrar: !FindInMap [AccountMap, !Ref "AWS::AccountId", registrar]
              gateway: !FindInMap [AccountMap, !Ref "AWS::AccountId", intgateway]
              xray: !FindInMap [AccountMap, !Ref "AWS::AccountId", xray]
              efsid:
                Fn::ImportValue: !Sub "${SearchDataStackName}-SearchRsyncEFS"
              regionid: !Ref "AWS::Region"

  DefaultAppLoadBalancerTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Condition: DeployMultiRegion
    Properties:
      HealthCheckIntervalSeconds: 27
      HealthCheckTimeoutSeconds: 20
      HealthyThresholdCount: 2
      Port: 8080
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue: !Sub "${NetworkStackName}-VPCID"

  DefaultService01TargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Condition: DeployMultiRegion
    Properties:
      HealthCheckIntervalSeconds: 27
      HealthCheckTimeoutSeconds: 20
      HealthyThresholdCount: 2
      Port: 8080
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue: !Sub "${NetworkStackName}-VPCID"

  DevnullListenerRule:
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
    Condition: DeployEastRegionOnly
    Properties:
      Actions:
      - TargetGroupArn: !Ref DevnullTargetGroup
        Type: forward
      Conditions:
      - Field: path-pattern
        Values:
        - /devnull/*
      ListenerArn: !Ref Service01LoadBalancerListener
      Priority: 9

  DevnullLogGroup:
    Type: "AWS::Logs::LogGroup"
    Condition: DeployEastRegionOnly
    Properties:
      LogGroupName: /svc/devnull
      RetentionInDays: 30

  DevnullService:
    Type: "AWS::ECS::Service"
    Condition: DeployDevnull
    DependsOn:
    - DevnullListenerRule
    Properties:
      Cluster: !Ref ServiceECSCluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 0
      LoadBalancers:
      - ContainerName: devnull
        ContainerPort: 8080
        TargetGroupArn: !Ref DevnullTargetGroup
      Role: !Ref ECSServiceRole
      TaskDefinition: !Ref DevnullTaskDefinition
      #placementStrategy:
      #- field: CPU
      #  type: binpack
      #- field: MEMORY
      #  type: binpack
      #- field: attribute:ecs.availability-zone
      #  type: spread
      #- type: random

  DevnullTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Condition: DeployEastRegionOnly
    Properties:
      HealthCheckIntervalSeconds: 27
      HealthCheckPath: /devnull/healthcheck
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 20
      HealthyThresholdCount: 2
      Port: 8080
      Protocol: HTTP
      Tags:
      - Key: TargetService
        Value: devnull
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '60'
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue: !Sub "${NetworkStackName}-VPCID"

  DevnullTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Condition: DeployDevnull
    Properties:
      ContainerDefinitions:
      - Environment:
        - Name: JAVA_MAX_MB
          Value: 128m
        - Name: SERVICE_8080_ATTRIBUTES
          Value: HOST_ROUTE=activity-
        - Name: SERVICE_8080_TAGS
          Value: httpsVisible
        Essential: 'true'
        Image: !Ref DevnullImage
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref DevnullLogGroup
            awslogs-region: !Ref "AWS::Region"
            awslogs-stream-prefix: ecs
        Memory: 160
        Cpu: 256
        Name: devnull
        PortMappings:
        - ContainerPort: 8080
          HostPort: 0
        - ContainerPort: 7199
          HostPort: 0

  DynamoDBPropertyV2:
    Type: "AWS::Lambda::Function"
    Condition: DeployMultiRegion
    Properties:
      Code:
        ZipFile: |-
          var response = require('cfn-response');
          exports.handler = function(event, context) {
              console.log('REQUEST RECEIVED:\n', JSON.stringify(event));
              var tableName = event.ResourceProperties.TableName;
              var responseData = {};
              if (tableName && event.ResourceProperties.Pairs) {
                  var aws = require('aws-sdk');
                  var docClient = new aws.DynamoDB.DocumentClient();
                  var docsadded=[];
                  var docsremoved=[];
                  var addedkeytable={};
                  var csvPairs = [];
                  if(event.ResourceProperties.CSVPairs)
                      csvPairs = event.ResourceProperties.CSVPairs.split(',')
                  csvPairs.forEach(function(element, index, array){
                      event.ResourceProperties.Pairs.push(element.trim())
                  });
                  event.ResourceProperties.Pairs.forEach(function(element, index, array){
                      var n = element.indexOf('=');
                      if(n>0) {
                          if(event.RequestType == 'Create' || event.RequestType == 'Update'){
                              docsadded.push({TableName: tableName, Item:{key: element.substring(0, n), value: element.substring(n+1)}});
                              addedkeytable[element.substring(0, n)]=tableName;
                          } else {
                              docsremoved.push({TableName: tableName, Key: {key: element.substring(0, n)}});
                          }
                      }
                  });
                  if (event.RequestType == 'Update' && event.OldResourceProperties && event.OldResourceProperties.Pairs && event.OldResourceProperties.TableName ) {
                      var oldTableName=event.OldResourceProperties.TableName;
                      csvPairs = [];
                      if(event.OldResourceProperties.CSVPairs)
                          csvPairs = event.OldResourceProperties.CSVPairs.split(',')
                      csvPairs.forEach(function(element, index, array){
                          event.OldResourceProperties.Pairs.push(element.trim())
                      });
                      event.OldResourceProperties.Pairs.forEach(function(element, index, array){
                          var n = element.indexOf('=');
                          if(n>0) {
                              if(oldTableName == tableName && !addedkeytable[element.substring(0, n)])
                                  docsremoved.push({TableName: oldTableName, Key: {key: element.substring(0, n)}});
                          }
                      });
                  }
                  if(docsadded.length + docsremoved.length == 0) {
                      response.send(event, context, response.SUCCESS);
                      return;
                  }
                  var completed=0;
                  var success=true;
                  var ddcallback = function(err, data){
                      completed++;
                      if(err) {
                          success = false;
                      }
                      if(completed == docsadded.length + docsremoved.length){
                          if(success){
                              response.send(event, context, response.SUCCESS, responseData, tableName);
                          } else {
                              responseData = { Error: 'Insert to ' + tableName + ' failed' };
                              console.log(responseData.Error + ':\n', err);
                              response.send(event, context, response.FAILED, responseData, tableName);
                          }
                      }
                  }
                  docsadded.forEach(function(element, index, array){
                      console.log('Adding:\n',JSON.stringify(element));
                      docClient.put(element, ddcallback);
                  });
                  docsremoved.forEach(function(element, index, array){
                      console.log('Deleting:\n',JSON.stringify(element));
                      docClient.delete(element, ddcallback);
                  });
              } else {
                  responseData = {Error: 'Table name or pairs not specified'};
                  console.log(responseData.Error);
                  response.send(event, context, response.FAILED, responseData);
              }
          };
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs4.3
      Timeout: '30'

  ECSServiceScaleUpAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Condition: DeployMultiRegion
    Properties:
      AlarmActions:
      - Ref: ECSServiceScaleUpPolicy
      AlarmDescription: Alarm if there are isn't at least one instances in the cluster with 2560 MB free
      ComparisonOperator: LessThanThreshold
      Dimensions:
      - Name: ClusterName
        Value: !Ref ServiceECSCluster
      EvaluationPeriods: '1'
      MetricName: AvailableInstanceCount
      Namespace: ECS
      Period: '60'
      Statistic: Average
      Threshold: !Ref ServiceClusterScaleUpThreshold

  ECSServiceScaleDownAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Condition: DeployMultiRegion
    Properties:
      AlarmActions:
      - Ref: ECSServiceScaleDownPolicy
      AlarmDescription: Alarm if memory reservation on the service cluster is low so it can be scaled down
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: ClusterName
        Value: !Ref ServiceECSCluster
      EvaluationPeriods: '15'
      MetricName: AvailableInstanceCount
      Namespace: ECS
      Period: '120'
      Statistic: Average
      Threshold: !Ref ServiceClusterScaleDownThreshold

  ECSServiceRole:
    Type: "AWS::IAM::Role"
    Condition: DeployMultiRegion
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ecs.amazonaws.com
            - application-autoscaling.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - elasticloadbalancing:Describe*
            - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
            - elasticloadbalancing:RegisterInstancesWithLoadBalancer
            - elasticloadbalancing:DeregisterTargets
            - elasticloadbalancing:RegisterTargets
            - ec2:Describe*
            - ec2:AuthorizeSecurityGroupIngress
            - ecs:DescribeServices
            - ecs:UpdateService
            - cloudwatch:DescribeAlarms
            Effect: Allow
            Resource:
            - '*'
          Version: '2012-10-17'
        PolicyName: ecs-service-elb

  ECSServiceScaleDownPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Condition: DeployMultiRegion
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ecsServiceASG
      ScalingAdjustment: -1

  ECSServiceScaleUpPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Condition: DeployMultiRegion
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ecsServiceASG
      Cooldown: '300'
      ScalingAdjustment: '2'

  RequestLogsS3Bucket:
    Condition: DeployEastRegionOnly
    DeletionPolicy: Retain
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: BucketOwnerFullControl
      BucketName:
        !Join
        - ''
        - - sr-incoming-requests-
          - !Ref AWS::AccountId
      VersioningConfiguration:
        Status: Suspended
      LifecycleConfiguration:
        Rules:
        -
          ExpirationInDays: 90
          Status: Enabled
      NotificationConfiguration:
        TopicConfigurations:
        -
          Topic:
            Fn::ImportValue: !Sub "${AthenaPartitionLoaderStackName}-AthenaPartitionLoaderSNSTopicArn"
          Event: "s3:ObjectCreated:*"
      Tags:
        - Key: Name
          Value: incoming-requests-logs-bucket
        - Key: Department
          Value: SR
        - Key: Spend_Category
          Value: monitoring

  RequestLogsS3BucketPolicy:
    Condition: DeployEastRegionOnly
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action: s3:PutObject
          Principal:
            AWS: 'arn:aws:iam::127311923021:root'
          Resource:
            !Join ['', ['arn:aws:s3:::sr-incoming-requests-', !Ref 'AWS::AccountId', '/*']]
          Effect: Allow
          Sid: RequestLogsS3BucketPolicy
      Bucket:
        !Ref RequestLogsS3Bucket
    DependsOn: RequestLogsS3Bucket

  RequestLogsFirehoseStream:
    Type: "AWS::KinesisFirehose::DeliveryStream"
    Condition: DeployEastRegionOnly
    Properties:
      DeliveryStreamName: sr-incoming-requests
      S3DestinationConfiguration:
        BucketARN: !GetAtt RequestLogsS3Bucket.Arn
        BufferingHints:
          IntervalInSeconds: 900
          SizeInMBs: 128
        CompressionFormat: GZIP
        Prefix: request-logs/
        RoleARN: !GetAtt RequestLogsFirehoseRole.Arn

  RequestLogsFirehoseRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - firehose.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - s3:AbortMultipartUpload
            - s3:GetBucketLocation
            - s3:GetObject
            - s3:ListBucket
            - s3:ListBucketMultipartUploads
            - s3:PutObject
            Effect: Allow
            Resource: "*"
          Version: '2012-10-17'
        PolicyName: firehose-s3-policy

  ContentLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Scheme: internet-facing
      SecurityGroups:
      - Fn::ImportValue: !Sub "${NetworkStackName}-ExtELBSecurityGroup"
      Subnets:
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetA"
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetB"
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetC"
      Tags:
        - Key: Name
          Value: content-elb
        - Key: Department
          Value: SR
        - Key: Spend_Category
          Value: content-svcs

  DefaultContentTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 27
      HealthCheckTimeoutSeconds: 20
      HealthyThresholdCount: 2
      Port: 8080
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue: !Sub "${NetworkStackName}-VPCID"

  ContentLoadBalancerListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      Certificates:
      - CertificateArn: !Join ['',['arn:aws:acm:', !Ref "AWS::Region", ':', !Ref "AWS::AccountId", ":certificate/", !FindInMap [CertMap, !Ref "AWS::Region", !Ref "AWS::AccountId"]]]
      DefaultActions:
      - TargetGroupArn: !Ref DefaultContentTargetGroup
        Type: forward
      LoadBalancerArn: !Ref ContentLoadBalancer
      Port: 443
      Protocol: HTTPS

  ContentQCLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Condition: DeployEastRegionOnly
    Properties:
      Scheme: internet-facing
      SecurityGroups:
      - Fn::ImportValue: !Sub "${NetworkStackName}-ExtELBSecurityGroup"
      Subnets:
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetA"
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetB"
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetC"
      Tags:
        - Key: Name
          Value: content-qc-elb
        - Key: Department
          Value: SR
        - Key: Spend_Category
          Value: content-svcs

  DefaultContentQCTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Condition: DeployEastRegionOnly
    Properties:
      HealthCheckIntervalSeconds: 27
      HealthCheckTimeoutSeconds: 20
      HealthyThresholdCount: 2
      Port: 8080
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue: !Sub "${NetworkStackName}-VPCID"

  ContentQCLoadBalancerListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Condition: DeployEastRegionOnly
    Properties:
      Certificates:
      - CertificateArn: !Join ['',['arn:aws:acm:', !Ref "AWS::Region", ':', !Ref "AWS::AccountId", ":certificate/", !FindInMap [CertMap, !Ref "AWS::Region", !Ref "AWS::AccountId"]]]
      DefaultActions:
      - TargetGroupArn: !Ref DefaultContentQCTargetGroup
        Type: forward
      LoadBalancerArn: !Ref ContentQCLoadBalancer
      Port: 443
      Protocol: HTTPS

  ExtImagesLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Scheme: internet-facing
      SecurityGroups:
      - Fn::ImportValue: !Sub "${NetworkStackName}-ExtELBSecurityGroup"
      Subnets:
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetA"
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetB"
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetC"
      Tags:
        - Key: Name
          Value: images-elb
        - Key: Department
          Value: SR
        - Key: Spend_Category
          Value: images-svcs

  DefaultExtImagesTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 27
      HealthCheckTimeoutSeconds: 20
      HealthyThresholdCount: 2
      Port: 8080
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue: !Sub "${NetworkStackName}-VPCID"

  ExtImagesLoadBalancerListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      Certificates:
      - CertificateArn: !Join ['',['arn:aws:acm:', !Ref "AWS::Region", ':', !Ref "AWS::AccountId", ":certificate/", !FindInMap [CertMap, !Ref "AWS::Region", !Ref "AWS::AccountId"]]]
      DefaultActions:
      - TargetGroupArn: !Ref DefaultExtImagesTargetGroup
        Type: forward
      LoadBalancerArn: !Ref ExtImagesLoadBalancer
      Port: 443
      Protocol: HTTPS

  ExtTFSLoadBalancer:
    Condition: DeployEastRegionOnly
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Scheme: internet-facing
      SecurityGroups:
      - Fn::ImportValue: !Sub "${NetworkStackName}-ExtELBSecurityGroup"
      Subnets:
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetA"
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetB"
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetC"
      Tags:
        - Key: Name
          Value: tfs-elb
        - Key: Department
          Value: SR
        - Key: Spend_Category
          Value: legacy-content-svcs

  DefaultExtTFSTargetGroup:
    Condition: DeployEastRegionOnly
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 27
      HealthCheckTimeoutSeconds: 20
      HealthyThresholdCount: 2
      Port: 8080
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue: !Sub "${NetworkStackName}-VPCID"

  # this ALB is for tfs only therefore default listener is tfs target
  ExtTFSLoadBalancerListener:
    Condition: DeployEastRegionOnly
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      Certificates:
      - CertificateArn: !Join ['',['arn:aws:acm:', !Ref "AWS::Region", ':', !Ref "AWS::AccountId", ":certificate/", !FindInMap [RokuCertMap, !Ref "AWS::Region", !Ref "AWS::AccountId"]]]
      DefaultActions:
      - TargetGroupArn: !Ref DefaultExtTFSTargetGroup
        Type: forward
      LoadBalancerArn: !Ref ExtTFSLoadBalancer
      Port: 443
      Protocol: HTTPS

  ExtBookmarksLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Condition: DeployMultiRegion
    Properties:
      Scheme: internet-facing
      SecurityGroups:
      - Fn::ImportValue: !Sub "${NetworkStackName}-ExtELBSecurityGroup"
      Subnets:
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetA"
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetB"
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetC"
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: true
        - Key: access_logs.s3.bucket
          Value: !Join ['-', ['elb-logs', !Ref "AWS::AccountId", !Ref "AWS::Region"]]
        - Key: access_logs.s3.prefix
          Value: bookmarks
      Tags:
        - Key: Name
          Value: bookmarks-elb
        - Key: Department
          Value: SR
        - Key: Spend_Category
          Value: bookmarks

  DefaultExtBookmarksTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 27
      HealthCheckTimeoutSeconds: 20
      HealthyThresholdCount: 2
      Port: 8080
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue: !Sub "${NetworkStackName}-VPCID"

  # this ALB is for bookmarks only therefore default listener is bookmarks target
  ExtBookmarksLoadBalancerListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      Certificates:
      - CertificateArn: !Join ['',['arn:aws:acm:', !Ref "AWS::Region", ':', !Ref "AWS::AccountId", ":certificate/", !FindInMap [RokuCertMap, !Ref "AWS::Region", !Ref "AWS::AccountId"]]]
      DefaultActions:
      - TargetGroupArn: !Ref DefaultExtBookmarksTargetGroup
        Type: forward
      LoadBalancerArn: !Ref ExtBookmarksLoadBalancer
      Port: 443
      Protocol: HTTPS

  SearchAppLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Condition: DeployMultiRegion
    Properties:
      Scheme: internet-facing
      SecurityGroups:
      - Fn::ImportValue: !Sub "${NetworkStackName}-ExtELBSecurityGroup"
      Subnets:
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetA"
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetB"
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetC"
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: true
        - Key: access_logs.s3.bucket
          Value: !Join ['-', ['elb-logs', !Ref "AWS::AccountId", !Ref "AWS::Region"]]
        - Key: access_logs.s3.prefix
          Value: search
      Tags:
        - Key: Name
          Value: search-elb
        - Key: Department
          Value: SR
        - Key: Spend_Category
          Value: search

  SearchLoadBalancerListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Condition: DeployMultiRegion
    Properties:
      Certificates:
      - CertificateArn: !Join ['',['arn:aws:acm:', !Ref "AWS::Region", ':', !Ref "AWS::AccountId", ":certificate/", !FindInMap [CertMap, !Ref "AWS::Region", !Ref "AWS::AccountId"]]]
      DefaultActions:
      - TargetGroupArn: !Ref DefaultSearchLoadBalancerTargetGroup
        Type: forward
      LoadBalancerArn: !Ref SearchAppLoadBalancer
      Port: 443
      Protocol: HTTPS

  DefaultSearchLoadBalancerTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Condition: DeployMultiRegion
    Properties:
      HealthCheckIntervalSeconds: 27
      HealthCheckTimeoutSeconds: 20
      HealthyThresholdCount: 2
      Port: 8080
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue: !Sub "${NetworkStackName}-VPCID"

  ExtAppLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Condition: DeployMultiRegion
    Properties:
      Scheme: internet-facing
      SecurityGroups: 
      - Fn::ImportValue: !Sub "${NetworkStackName}-ExtELBSecurityGroup"
      Subnets:
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetA"
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetB"
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetC"
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: true
        - Key: access_logs.s3.bucket
          Value: !Join ['-', ['elb-logs', !Ref "AWS::AccountId", !Ref "AWS::Region"]]
        - Key: access_logs.s3.prefix
          Value: api2
      Tags:
        - Key: Name
          Value: api2-elb
        - Key: Department
          Value: SR
        - Key: Spend_Category
          Value: request_logs

  OTALoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Condition: DeployMultiRegion
    Properties:
      Scheme: internet-facing
      SecurityGroups:
      - Fn::ImportValue: !Sub "${NetworkStackName}-ExtELBSecurityGroup"
      Subnets:
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetA"
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetB"
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetC"
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: true
        - Key: access_logs.s3.bucket
          Value: !Join ['-', ['elb-logs', !Ref "AWS::AccountId", !Ref "AWS::Region"]]
        - Key: access_logs.s3.prefix
          Value: ota-reg
      Tags:
        - Key: Name
          Value: ota-reg-elb
        - Key: Department
          Value: SR
        - Key: Spend_Category
          Value: search

  OTALoadBalancerListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Condition: DeployMultiRegion
    Properties:
      Certificates:
      - CertificateArn: !Join ['',['arn:aws:acm:', !Ref "AWS::Region", ':', !Ref "AWS::AccountId", ":certificate/", !FindInMap [RokuCertMap, !Ref "AWS::Region", !Ref "AWS::AccountId"]]]
      DefaultActions:
      - TargetGroupArn: !Ref DefaultOTALoadBalancerTargetGroup
        Type: forward
      LoadBalancerArn: !Ref OTALoadBalancer
      Port: 443
      Protocol: HTTPS

  DefaultOTALoadBalancerTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Condition: DeployMultiRegion
    Properties:
      HealthCheckIntervalSeconds: 27
      HealthCheckTimeoutSeconds: 20
      HealthyThresholdCount: 2
      Port: 8080
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue: !Sub "${NetworkStackName}-VPCID"

  ExtAppLoadBalancerListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Condition: DeployMultiRegion
    Properties:
      Certificates:
      - CertificateArn: !Join ['',['arn:aws:acm:', !Ref "AWS::Region", ':', !Ref "AWS::AccountId", ":certificate/", !FindInMap [CertMap, !Ref "AWS::Region", !Ref "AWS::AccountId"]]]
      DefaultActions:
      - TargetGroupArn: !Ref DefaultAppLoadBalancerTargetGroup
        Type: forward
      LoadBalancerArn: !Ref ExtAppLoadBalancer
      Port: 443
      Protocol: HTTPS

  ExtGatewayLogGroup:
    Type: "AWS::Logs::LogGroup"
    Condition: DeployMultiRegion
    Properties:
      LogGroupName: /svc/ext-gateway
      RetentionInDays: 30

  ExtHAProxyASG:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Condition: DeployMultiRegion
    DependsOn:
    - ServiceDiscoveryTable
    - ServiceDiscoveryChangeCountersTable
    - GlobalServiceDiscoveryTable
    Properties:
      AvailabilityZones:
      - Fn::ImportValue: !Sub "${NetworkStackName}-AZ1"
      - Fn::ImportValue: !Sub "${NetworkStackName}-AZ2"
      - Fn::ImportValue: !Sub "${NetworkStackName}-AZ3"
      Cooldown: '300'
      HealthCheckGracePeriod: 600
      HealthCheckType: ELB
      LaunchConfigurationName: !Ref ExtHAProxyLaunchConfig
      LoadBalancerNames:
      - Ref: ExtHAProxyLoadBalancer
      - "Fn::If": [LoadTestELBDeploy, !Ref LoadTestHAProxyLoadBalancer, !Ref "AWS::NoValue"]
      MaxSize: 75
      MetricsCollection:
      - Granularity: 1Minute
      MinSize: !Ref HAProxyMinSize
      Tags:
      - Key: Name
        PropagateAtLaunch: 'true'
        Value: HAProxy-Cluster
      - Key: Department
        PropagateAtLaunch: 'true'
        Value: SR
      - Key: Spend_Category
        PropagateAtLaunch: 'true'
        Value: ext-haproxy
      VPCZoneIdentifier:
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetA"
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetB"
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetC"
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: !Ref ServiceClusterRollSize
        PauseTime: PT15M
        MinSuccessfulInstancesPercent: 80
        WaitOnResourceSignals: true

  ExtHAProxyCPUAlarmHigh:
    Type: "AWS::CloudWatch::Alarm"
    Condition: DeployMultiRegion
    Properties:
      AlarmActions:
      - Ref: ExtHAProxyScaleUpPolicy
      AlarmDescription: Alarm if CPU too high so ASG can be scaled up
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref ExtHAProxyASG
      EvaluationPeriods: '3'
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: '60'
      Statistic: Average
      Threshold: '25'

  ExtHAProxyCPUAlarmLow:
    Type: "AWS::CloudWatch::Alarm"
    Condition: DeployMultiRegion
    Properties:
      AlarmActions:
      - Ref: ExtHAProxyScaleDownPolicy
      AlarmDescription: Alarm if CPU is low so ASG can be scaled down
      ComparisonOperator: LessThanThreshold
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref ExtHAProxyASG
      EvaluationPeriods: '2'
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: '60'
      Statistic: Average
      Threshold: '10'

  ExtHAProxyLaunchConfig:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Condition: DeployMultiRegion
    DependsOn:
    - ExtGatewayLogGroup
    Properties:
      AssociatePublicIpAddress: 'true'
      BlockDeviceMappings:
      - DeviceName: /dev/xvda
        Ebs:
          VolumeSize: '60'
          VolumeType: gp2
      EbsOptimized: 'false'
      IamInstanceProfile:
        Fn::ImportValue: !Sub "${NetworkStackName}-InstanceProfile"
      ImageId: !FindInMap [HAProxyAMIMap, !Ref "AWS::Region", !Ref "AWS::AccountId"]
      InstanceMonitoring: 'true'
      InstanceType: c5.large
      SecurityGroups:
      - Fn::ImportValue: !Sub "${NetworkStackName}-InstanceSecurityGroup"
      UserData:
        "Fn::Base64":
          !Sub
            - |-
              #!/bin/sh
              set -x
              yum update -y
              yum install -y aws-cli docker openssl-devel
              service docker start
              export CLOUD_APP=ExtHAProxy
              export ECS_BOOT_VERSION=${boot}
              export SERVICE_DISCOVERY_TABLE=${ServiceDiscoveryTable}
              export SERVICE_DISCOVERY_COUNTER_TABLE=${ServiceDiscoveryChangeCountersTable}
              export SSL_CONFIG_KEY=${SSLKey}
              export EXTERNAL_HA_PROXY=true
              export REGISTRAR_IMG=${registrar}
              export GATEWAY_IMG=${gateway}
              echo '* hard nofile 100000' | tee -a /etc/security/limits.conf
              echo '* soft nofile 100000' | tee -a /etc/security/limits.conf
              ulimit -n 100000
              aws s3 cp --quiet --recursive s3://roku-ecs-boot/$ECS_BOOT_VERSION/ /usr/local/bin/
              chmod u+rx /usr/local/bin/*.sh /usr/local/bin/*.py
              /usr/local/bin/initialize_ecs_at_startup.sh 2>&1 >> /tmp/initialize_ecs_at_startup.log
              cfresult=$?
              if [ $cfresult -ne 0 ]; then /opt/aws/bin/cfn-signal -e $cfresult --stack ${AWS::StackName} --resource ExtHAProxyASG --region ${AWS::Region}; fi
              res=0; while [ $res -ne 1 ]; do grep "#uninitialized" /etc/haproxy/haproxy.cfg; res=$?; sleep 1; done
              /opt/aws/bin/cfn-signal -e 0 --stack ${AWS::StackName} --resource ExtHAProxyASG --region ${AWS::Region}
            -
              boot: !FindInMap [AccountMap, !Ref "AWS::AccountId", haproxyboot]
              registrar: !FindInMap [AccountMap, !Ref "AWS::AccountId", registrar]
              gateway: !FindInMap [AccountMap, !Ref "AWS::AccountId", extgateway]

  LoadTestHAProxyLoadBalancer:
    Type: "AWS::ElasticLoadBalancing::LoadBalancer"
    Condition: LoadTestELBDeploy
    Properties:
      CrossZone: true
      HealthCheck:
        HealthyThreshold: '2'
        Interval: '27'
        Target: 'TCP:8443'
        Timeout: '20'
        UnhealthyThreshold: '2'
      Listeners:
      - InstancePort: '8443'
        LoadBalancerPort: '443'
        Protocol: TCP
      Scheme: internet-facing
      SecurityGroups:
      - Fn::ImportValue: !Sub "${NetworkStackName}-ExtELBSecurityGroup"
      Subnets:
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetA"
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetB"
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetC"
      Tags:
      - Key: Department
        Value: SR
      - Key: Spend_Category
        Value: ecs-service

  ExtHAProxyLoadBalancer:
    Type: "AWS::ElasticLoadBalancing::LoadBalancer"
    Condition: DeployMultiRegion
    Properties:
      CrossZone: true
      HealthCheck:
        HealthyThreshold: '2'
        Interval: '27'
        Target: !Join ['', ['HTTP:', '8442', '/haproxy/stats;csv'] ]
        Timeout: '20'
        UnhealthyThreshold: '2'
      ConnectionSettings:
        IdleTimeout: 70
      Listeners:
      - InstancePort: '8442'
        LoadBalancerPort: '80'
        Protocol: HTTP
      - InstancePort: '9443'
        LoadBalancerPort: '443'
        Protocol: TCP
      Policies:
      - Attributes:
        - Name: ProxyProtocol
          Value: 'true'
        InstancePorts:
        - '9443'
        PolicyName: EnableProxyProtocol
        PolicyType: ProxyProtocolPolicyType
      Scheme: internet-facing
      SecurityGroups:
      - Fn::ImportValue: !Sub "${NetworkStackName}-ExtELBSecurityGroup"
      Subnets:
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetA"
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetB"
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetC"
      Tags:
      - Key: Department
        Value: SR
      - Key: Spend_Category
        Value: ext-haproxy

  ExtHAProxyScaleDownPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Condition: DeployMultiRegion
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ExtHAProxyASG
      Cooldown: '300'
      ScalingAdjustment: '-1'

  ExtHAProxyScaleUpPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Condition: DeployMultiRegion
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ExtHAProxyASG
      PolicyType: StepScaling
      EstimatedInstanceWarmup: 300
      StepAdjustments:
        -
          MetricIntervalLowerBound: "0"
          MetricIntervalUpperBound: 10
          ScalingAdjustment: "2"
        -
          MetricIntervalLowerBound: 10
          ScalingAdjustment: 3

  IntGatewayLogGroup:
    Type: "AWS::Logs::LogGroup"
    Condition: DeployMultiRegion
    Properties:
      LogGroupName: /svc/int-gateway
      RetentionInDays: 30

  XRayGatewayLogGroup:
      Type: "AWS::Logs::LogGroup"
      Condition: DeployMultiRegion
      Properties:
        LogGroupName: /svc/xray
        RetentionInDays: 7

  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Condition: DeployMultiRegion
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
          - Action:
            - dynamodb:DeleteItem
            - dynamodb:PutItem
            - cloudformation:DescribeStacks
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: root

  RegistrarLogGroup:
    Type: "AWS::Logs::LogGroup"
    Condition: DeployMultiRegion
    Properties:
      LogGroupName: /svc/registrar
      RetentionInDays: 30
  
  SearchDNSRecord:
    Type: "AWS::Route53::RecordSet"
    Properties:
      AliasTarget:
        DNSName: !GetAtt ExtAppLoadBalancer.DNSName
        EvaluateTargetHealth: false
        HostedZoneId: !GetAtt ExtAppLoadBalancer.CanonicalHostedZoneID
      Comment: DNS name for search
      HostedZoneName: !Join ['', [!FindInMap [AccountMap, !Ref "AWS::AccountId", name], sr.roku.com.]]
      Name: !Join ['', [search, '-', !Ref "AWS::Region", '.', !FindInMap [AccountMap,!Ref "AWS::AccountId", name], sr.roku.com. ]]
      Type: A
      
  Service01IntLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Condition: DeployMultiRegion
    Properties:
      Scheme: internal
      SecurityGroups:
      - Fn::ImportValue: !Sub "${NetworkStackName}-InstanceSecurityGroup"
      Subnets:
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetA"
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetB"
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetC"
      Tags:
        - Key: Department
          Value: SR
        - Key: Spend_Category
          Value: ecs-service

  Service01LoadBalancerListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Condition: DeployMultiRegion
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref DefaultService01TargetGroup
        Type: forward
      LoadBalancerArn: !Ref Service01IntLoadBalancer
      Port: 80
      Protocol: HTTP

  ServiceDiscoveryChangeCountersTable:
    Type: "AWS::DynamoDB::Table"
    Condition: DeployMultiRegion
    Properties:
      AttributeDefinitions:
      - AttributeName: name
        AttributeType: S
      KeySchema:
      - AttributeName: name
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '20'
        WriteCapacityUnits: '10'
      Tags:
      - Key: Department
        Value: SR
      - Key: Spend_Category
        Value: ecs-service

  ServiceDiscoveryTable:
    Type: "AWS::DynamoDB::Table"
    Condition: DeployMultiRegion
    Properties:
      AttributeDefinitions:
      - AttributeName: serviceName
        AttributeType: S
      - AttributeName: serviceInstanceId
        AttributeType: S
      GlobalSecondaryIndexes:
      - IndexName: serviceInstanceId-serviceName-index
        KeySchema:
        - AttributeName: serviceInstanceId
          KeyType: HASH
        - AttributeName: serviceName
          KeyType: RANGE
        Projection:
          ProjectionType: KEYS_ONLY
        ProvisionedThroughput:
          ReadCapacityUnits: '5'
          WriteCapacityUnits: '5'
      KeySchema:
      - AttributeName: serviceName
        KeyType: HASH
      - AttributeName: serviceInstanceId
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: '300'
        WriteCapacityUnits: '30'
      Tags:
      - Key: Department
        Value: SR
      - Key: Spend_Category
        Value: ecs-service
      TimeToLiveSpecification:
        AttributeName: timeToLive
        Enabled: true

  GlobalServiceDiscoveryTable:
    Type: "AWS::DynamoDB::Table"
    Condition: DeployMultiRegion
    Properties:
      TableName: GlobalServiceDiscoveryTable
      AttributeDefinitions:
      - AttributeName: serviceName
        AttributeType: S
      - AttributeName: serviceInstanceId
        AttributeType: S
      GlobalSecondaryIndexes:
      - IndexName: serviceInstanceId-serviceName-index
        KeySchema:
        - AttributeName: serviceInstanceId
          KeyType: HASH
        - AttributeName: serviceName
          KeyType: RANGE
        Projection:
          ProjectionType: KEYS_ONLY
        ProvisionedThroughput:
          ReadCapacityUnits: '5'
          WriteCapacityUnits: '5'
      KeySchema:
      - AttributeName: serviceName
        KeyType: HASH
      - AttributeName: serviceInstanceId
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: '300'
        WriteCapacityUnits: '45'
      Tags:
      - Key: Department
        Value: SR
      - Key: Spend_Category
        Value: ecs-service
      TimeToLiveSpecification:
        AttributeName: timeToLive
        Enabled: true
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  ServiceDiscoveryWriteCapacityScalableTarget:
    Condition: DeployMultiRegion
    Type: "AWS::ApplicationAutoScaling::ScalableTarget"
    Properties:
      MaxCapacity: !FindInMap [RegionMap, !FindInMap [RegionLookupMap, !Ref "AWS::Region", !Ref "AWS::AccountId"], ServiceDiscoveryMaxWriteCapacity]
      MinCapacity: !FindInMap [RegionMap, !FindInMap [RegionLookupMap, !Ref "AWS::Region", !Ref "AWS::AccountId"], ServiceDiscoveryWriteCapacity]
      ResourceId: !Join
        - /
        - - table
          - !Ref ServiceDiscoveryTable
      RoleARN: !GetAtt DynamoDBScalingRole.Arn
      ScalableDimension: dynamodb:table:WriteCapacityUnits
      ServiceNamespace: dynamodb

  ServiceDiscoveryWriteScalingPolicy:
    Condition: DeployMultiRegion
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: WriteAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ServiceDiscoveryWriteCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 50.0
        ScaleInCooldown: 120
        ScaleOutCooldown: 300
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBWriteCapacityUtilization

  ServiceDiscoveryReadCapacityScalableTarget:
    Condition: DeployMultiRegion
    Type: "AWS::ApplicationAutoScaling::ScalableTarget"
    Properties:
      MaxCapacity: !FindInMap [RegionMap, !FindInMap [RegionLookupMap, !Ref "AWS::Region", !Ref "AWS::AccountId"], ServiceDiscoveryMaxReadCapacity]
      MinCapacity: !FindInMap [RegionMap, !FindInMap [RegionLookupMap, !Ref "AWS::Region", !Ref "AWS::AccountId"], ServiceDiscoveryReadCapacity]
      ResourceId: !Join
        - /
        - - table
          - !Ref ServiceDiscoveryTable
      RoleARN: !GetAtt DynamoDBScalingRole.Arn
      ScalableDimension: dynamodb:table:ReadCapacityUnits
      ServiceNamespace: dynamodb

  ServiceDiscoveryReadScalingPolicy:
    Condition: DeployMultiRegion
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: ReadAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ServiceDiscoveryReadCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 30.0
        ScaleInCooldown: 120
        ScaleOutCooldown: 300
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBReadCapacityUtilization

  DynamoDBScalingRole:
    Type: "AWS::IAM::Role"
    Condition: DeployMultiRegion
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "dynamodb:DescribeTable"
                  - "dynamodb:UpdateTable"
                  - "cloudwatch:PutMetricAlarm"
                  - "cloudwatch:DescribeAlarms"
                  - "cloudwatch:GetMetricStatistics"
                  - "cloudwatch:SetAlarmState"
                  - "cloudwatch:DeleteAlarms"
                Resource: "*"

  ServiceECSCluster:
    Type: "AWS::ECS::Cluster"
    Condition: DeployMultiRegion

  ServiceClusterHealthcheckELB:
    Type: "AWS::ElasticLoadBalancing::LoadBalancer"
    Condition: DeployMultiRegion
    Properties:
      CrossZone: true
      HealthCheck:
        HealthyThreshold: '3'
        Interval: '27'
        Target: 'HTTP:8000/healthcheck'
        Timeout: '5'
        UnhealthyThreshold: '10'
      Listeners:
      - InstancePort: '9000'
        LoadBalancerPort: '80'
        Protocol: HTTP
      Scheme: internal
      SecurityGroups:
      - Fn::ImportValue: !Sub "${NetworkStackName}-InstanceSecurityGroup"
      Subnets:
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetA"
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetB"
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetC"
      Tags:
      - Key: Department
        Value: SR
      - Key: Spend_Category
        Value: ecs-service

  ecsServiceASG:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Condition: DeployMultiRegion
    DependsOn:
    - ServiceDiscoveryTable
    - ServiceDiscoveryChangeCountersTable
    - GlobalServiceDiscoveryTable
    Properties:
      AvailabilityZones:
      - Fn::ImportValue: !Sub "${NetworkStackName}-AZ1"
      - Fn::ImportValue: !Sub "${NetworkStackName}-AZ2"
      - Fn::ImportValue: !Sub "${NetworkStackName}-AZ3"
      Cooldown: '30'
      HealthCheckGracePeriod: 600
      HealthCheckType: ELB
      LoadBalancerNames:
        - Ref: "ServiceClusterHealthcheckELB"
      LaunchConfigurationName: !Ref ecsServiceLaunchConfig
      MaxSize: !Ref MaxServiceClusterSize
      MetricsCollection:
      - Granularity: 1Minute
      MinSize: !Ref MinServiceClusterSize
      Tags:
      - Key: Name
        PropagateAtLaunch: 'true'
        Value: ECS-Service-Cluster
      - Key: Department
        PropagateAtLaunch: 'true'
        Value: SR
      - Key: Spend_Category
        PropagateAtLaunch: 'true'
        Value: ecs-service
      VPCZoneIdentifier:
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetA"
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetB"
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetC"
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: !Ref ServiceClusterRollSize
        PauseTime: PT15M
        MinSuccessfulInstancesPercent: 80
        WaitOnResourceSignals: true

  ecsServiceLaunchConfig:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Condition: DeployMultiRegion
    DependsOn:
    - RegistrarLogGroup
    - IntGatewayLogGroup
    Properties:
      AssociatePublicIpAddress: 'true'
      BlockDeviceMappings:
      - DeviceName: /dev/xvda
        Ebs:
          VolumeSize: '60'
          VolumeType: gp2
      EbsOptimized: 'false'
      IamInstanceProfile:
        Fn::ImportValue: !Sub "${NetworkStackName}-InstanceProfile"
      ImageId: !FindInMap [ECSAMIMap, !Ref "AWS::Region", !Ref "AWS::AccountId"]
      InstanceMonitoring: 'true'
      InstanceType: c5.large
      SecurityGroups:
      - Fn::ImportValue: !Sub "${NetworkStackName}-InstanceSecurityGroup"
      UserData:
        "Fn::Base64":
          !Sub
            - |-
              #!/bin/sh
              set -x
              echo ECS_CLUSTER=${ServiceECSCluster} >> /etc/ecs/ecs.config
              export CLOUD_APP=ecs
              yum update --exclude=ecs-init --exclude=docker --exclude=docker-devel --exclude=docker-pkg-devel -y
              yum install -y aws-cli openssl-devel amazon-ssm-agent
              export ECS_BOOT_VERSION=${boot}
              export SERVICE_DISCOVERY_TABLE=${ServiceDiscoveryTable}
              export SERVICE_DISCOVERY_COUNTER_TABLE=${ServiceDiscoveryChangeCountersTable}
              export REGISTRAR_IMG=${registrar}
              export GATEWAY_IMG=${gateway}
              export XRAY_IMG=${xray}
              echo '* hard nofile 100000' | tee -a /etc/security/limits.conf
              echo '* soft nofile 100000' | tee -a /etc/security/limits.conf
              ulimit -n 100000
              aws s3 cp --quiet --recursive s3://roku-ecs-boot/$ECS_BOOT_VERSION/  /usr/local/bin/
              chmod u+rx /usr/local/bin/*.sh /usr/local/bin/*.py
              start amazon-ssm-agent
              /usr/local/bin/initialize_ecs_at_startup.sh 2>&1 >> /tmp/initialize_ecs_at_startup.log
              /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ecsServiceASG --region ${AWS::Region}
            -
              boot: !FindInMap [AccountMap, !Ref "AWS::AccountId", serviceecsboot]
              registrar: !FindInMap [AccountMap, !Ref "AWS::AccountId", registrar]
              gateway: !FindInMap [AccountMap, !Ref "AWS::AccountId", intgateway]
              xray: !FindInMap [AccountMap, !Ref "AWS::AccountId", xray]

Outputs:
  DatafetcherECSCluster:
    Description: DatafetcherCluster ID for stack
    Condition: DeployDatafetcher
    Value: !Ref DatafetcherECSCluster
    Export:
      Name: !Sub ${AWS::StackName}-DatafetcherECSCluster
  ECSServiceCluster:
    Description: ServiceCluster ID for stack
    Value: !Ref ServiceECSCluster
    Export:
      Name: !Sub ${AWS::StackName}-ECSServiceCluster
  ECSServiceRole:
    Description: ECS Service Role
    Value: !Ref ECSServiceRole
    Export:
      Name: !Sub ${AWS::StackName}-ECSServiceRole
  ECSServiceRoleArn:
    Description: ECS Service Role ARN
    Value: !GetAtt ECSServiceRole.Arn
    Export:
      Name: !Sub ${AWS::StackName}-ECSServiceRoleArn

  RequestLogsS3Bucket:
    Condition: DeployEastRegionOnly
    Description: Incoming Request Logs Bucket
    Value: !Ref RequestLogsS3Bucket
    Export:
      Name: !Sub ${AWS::StackName}-RequestLogsS3Bucket

  ExtAppLoadBalancerListener:
    Description: External Application load balancer instance
    Value: !Ref ExtAppLoadBalancerListener
    Export:
      Name: !Sub ${AWS::StackName}-ExtAppLoadBalancerListener
  ExtAppLoadBalancerListenerDNSName:
    Description: The DNS Name of the ExtAppLoadBalancerListener
    Value: !GetAtt ExtAppLoadBalancer.DNSName
    Export:
      Name: !Sub ${AWS::StackName}-ExtAppLoadBalancerListenerDNSName
  HAProxyStats:
    Description: HAProxy stats endpoint for the stack
    Value: !Join ['', ['http://', !Ref "APIDNSRecord", /haproxy/stats] ]
  Service01LoadBalancerListener:
    Description: Service01 load balancer instance
    Value: !Ref Service01LoadBalancerListener
    Export:
      Name: !Sub ${AWS::StackName}-Service01LoadBalancerListener
  ServiceDiscoveryChangeCountersTable:
    Description: Name of the DynamoDB service discovery change counters table
    Value: !Ref ServiceDiscoveryChangeCountersTable
    Export:
      Name: !Sub ${AWS::StackName}-ServiceDiscoveryChangeCountersTable
  ServiceDiscoveryTable:
    Description: Name of the DynamoDB service discovery table
    Value: !Ref ServiceDiscoveryTable
    Export:
      Name: !Sub ${AWS::StackName}-ServiceDiscoveryTable
  ExtBookmarksLoadBalancerListener:
    Description: External Bookmarks load balancer instance
    Value: !Ref ExtBookmarksLoadBalancerListener
    Export:
      Name: !Sub ${AWS::StackName}-ExtBookmarksLoadBalancerListener
  ExtTFSLoadBalancerListener:
    Condition: DeployEastRegionOnly
    Description: External TFS load balancer instance
    Value: !Ref ExtTFSLoadBalancerListener
    Export:
      Name: !Sub ${AWS::StackName}-ExtTFSLoadBalancerListener
  ContentLoadBalancerListener:
    Description: Content load balancer instance
    Value: !Ref ContentLoadBalancerListener
    Export:
      Name: !Sub ${AWS::StackName}-ContentLoadBalancerListener
  ContentQCLoadBalancerListener:
    Condition: DeployEastRegionOnly
    Description: Content QC load balancer instance
    Value: !Ref ContentQCLoadBalancerListener
    Export:
      Name: !Sub ${AWS::StackName}-ContentQCLoadBalancerListener
  ExtImagesLoadBalancerListener:
    Description: External Images (with redirect from s3) load balancer instance
    Value: !Ref ExtImagesLoadBalancerListener
    Export:
      Name: !Sub ${AWS::StackName}-ExtImagesLoadBalancerListener
  SearchLoadBalancerListener:
    Description: Search load balancer listener
    Value: !Ref SearchLoadBalancerListener
    Export:
      Name: !Sub ${AWS::StackName}-SearchLoadBalancerListener
  OTALoadBalancerListener:
    Description: OTA load balancer listener
    Value: !Ref OTALoadBalancerListener
    Export:
      Name: !Sub ${AWS::StackName}-OTALoadBalancerListener
  OTALoadBalancerDNSName:
    Description: OTA load balancer listener
    Value: !GetAtt OTALoadBalancer.DNSName
    Export:
      Name: !Sub ${AWS::StackName}-OTALoadBalancerDNSName
  OTALoadBalancerHostedZoneId:
    Description: OTA load balancer listener
    Value: !GetAtt OTALoadBalancer.CanonicalHostedZoneID
    Export:
      Name: !Sub ${AWS::StackName}-OTALoadBalancerHostedZoneId



