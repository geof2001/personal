Description: Template specifying the configuration of ELBs and ALBs

Conditions:
  DeployEastRegionOnly: !Equals [!Ref "AWS::Region", 'us-east-1']
  DeployMultiRegion: !Or [!Equals [!Ref "AWS::Region", 'us-east-1'], !Equals [!Ref "AWS::Region", 'us-west-2']]
  
Parameters:
  NetworkStackName:
    AllowedPattern: \S+
    Default: roku-network
    Description: Name of network stack
    Type: String
  
Mappings: {}
  
Resources:
  Batch01IntLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Condition: DeployMultiRegion
    Properties:
      Scheme: internal
      SecurityGroups:
      - Fn::ImportValue: !Sub "${NetworkStackName}-InstanceSecurityGroup"
      Subnets:
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetA"
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetB"
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetC"
      Tags:
        - Key: Department
          Value: SR
        - Key: Spend_Category
          Value: ecs-batch

  Batch01LoadBalancerListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Condition: DeployMultiRegion
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref DefaultBatch01TargetGroup
        Type: forward
      LoadBalancerArn: !Ref Batch01IntLoadBalancer
      Port: 80
      Protocol: HTTP

  DefaultBatch01TargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Condition: DeployMultiRegion
    Properties:
      HealthCheckIntervalSeconds: 27
      HealthCheckTimeoutSeconds: 20
      HealthyThresholdCount: 2
      Port: 8080
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue: !Sub "${NetworkStackName}-VPCID"

  Batch02IntLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Condition: DeployMultiRegion
    Properties:
      Scheme: internal
      SecurityGroups:
      - Fn::ImportValue: !Sub "${NetworkStackName}-InstanceSecurityGroup"
      Subnets:
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetA"
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetB"
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetC"
      Tags:
        - Key: Department
          Value: SR
        - Key: Spend_Category
          Value: ecs-batch

  Batch02LoadBalancerListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Condition: DeployMultiRegion
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref DefaultBatch02TargetGroup
        Type: forward
      LoadBalancerArn: !Ref Batch02IntLoadBalancer
      Port: 80
      Protocol: HTTP

  DefaultBatch02TargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Condition: DeployMultiRegion
    Properties:
      HealthCheckIntervalSeconds: 27
      HealthCheckTimeoutSeconds: 20
      HealthyThresholdCount: 2
      Port: 8080
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue: !Sub "${NetworkStackName}-VPCID"

  Batch03IntLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Condition: DeployMultiRegion
    Properties:
      Scheme: internal
      SecurityGroups:
      - Fn::ImportValue: !Sub "${NetworkStackName}-InstanceSecurityGroup"
      Subnets:
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetA"
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetB"
      - Fn::ImportValue: !Sub "${NetworkStackName}-SubnetC"
      Tags:
        - Key: Department
          Value: SR
        - Key: Spend_Category
          Value: ecs-batch

  Batch03LoadBalancerListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Condition: DeployMultiRegion
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref DefaultBatch03TargetGroup
        Type: forward
      LoadBalancerArn: !Ref Batch03IntLoadBalancer
      Port: 80
      Protocol: HTTP

  DefaultBatch03TargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Condition: DeployMultiRegion
    Properties:
      HealthCheckIntervalSeconds: 27
      HealthCheckTimeoutSeconds: 20
      HealthyThresholdCount: 2
      Port: 8080
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue: !Sub "${NetworkStackName}-VPCID"
        
  Batch04DEAIntLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Condition: DeployEastRegionOnly
    Properties:
      Scheme: internal
      SecurityGroups:
      - Fn::ImportValue: !Sub "${NetworkStackName}-InstanceSecurityGroup"
      Subnets:
      - Fn::ImportValue: !Sub "${NetworkStackName}-PeeringWithDEASubnetA"
      - Fn::ImportValue: !Sub "${NetworkStackName}-PeeringWithDEASubnetB"
      Tags:
        - Key: Department
          Value: SR
        - Key: Spend_Category
          Value: ecs-batch

  Batch04DEALoadBalancerListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Condition: DeployEastRegionOnly
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref DefaultBatch04DEATargetGroup
        Type: forward
      LoadBalancerArn: !Ref Batch04DEAIntLoadBalancer
      Port: 80
      Protocol: HTTP

  DefaultBatch04DEATargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Condition: DeployEastRegionOnly
    Properties:
      HealthCheckIntervalSeconds: 27
      HealthCheckTimeoutSeconds: 20
      HealthyThresholdCount: 2
      Port: 8080
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue: !Sub "${NetworkStackName}-VPCID"

  CronTaskSchedulerRole:
    Type: "AWS::IAM::Role"
    Condition: DeployEastRegionOnly
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - ecs:RunTask
            Effect: Allow
            Resource: "*"
          Version: '2012-10-17'
        PolicyName: root

  CronLambdaTask:
    Type: "AWS::Lambda::Function"
    Condition: DeployEastRegionOnly
    Properties:
      Code:
        ZipFile: |-
          'use strict';
          var AWS = require("aws-sdk");
          var ecs = new AWS.ECS();
          exports.handler = (event, context, callback) => {
              var params = {};
              try {
                  params.cluster = event.cluster;
                  params.taskDefinition = event.taskDefinition;
              } catch(e) {
                  console.log(e);
                  callback(e);
                  return;
              }
              ecs.runTask(params, function(err, data) {
                  if (err)
                      console.log(err, err.stack); // an error occurred
                  else
                      console.log("Task executed: " + JSON.stringify(data));
                  callback(err, data);
              });
          };
      Handler: index.handler
      Role: !GetAtt CronTaskSchedulerRole.Arn
      Runtime: nodejs4.3
      Timeout: '30'

  CronLambdaEventsPermission:
    Type: "AWS::Lambda::Permission"
    Condition: DeployEastRegionOnly
    Properties:
      FunctionName: !Ref CronLambdaTask
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"

Outputs:
  Batch01LoadBalancerListener:
    Description: Batch01 load balancer instance
    Value: !Ref Batch01LoadBalancerListener
    Export:
      Name: !Sub ${AWS::StackName}-Batch01LoadBalancerListener
  Batch02LoadBalancerListener:
    Description: Batch02 load balancer instance
    Value: !Ref Batch02LoadBalancerListener
    Export:
      Name: !Sub ${AWS::StackName}-Batch02LoadBalancerListener
  Batch03LoadBalancerListener:
    Description: Batch03 load balancer instance
    Value: !Ref Batch03LoadBalancerListener
    Export:
      Name: !Sub ${AWS::StackName}-Batch03LoadBalancerListener
  Batch04DEALoadBalancerListener:
    Description: Batch04 DEA load balancer instance
    Condition: DeployEastRegionOnly
    Value: !Ref Batch04DEALoadBalancerListener
    Export:
      Name: !Sub ${AWS::StackName}-Batch04DEALoadBalancerListener
  CronLambdaTaskArn:
    Description: CronLambdaTask ARN
    Condition: DeployEastRegionOnly
    Value: !GetAtt CronLambdaTask.Arn
    Export:
      Name: !Sub ${AWS::StackName}-CronLambdaTaskArn
