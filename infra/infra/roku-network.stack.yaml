Parameters: {}

Conditions:
  DeployEastRegionOnly: !Equals [!Ref "AWS::Region", 'us-east-1']

Mappings:
  AccountMap:
    eu-west-1:
      '638782101961': 638782101961.eu-west-1
      '181133766305': 181133766305.eu-west-1
      '886239521314': 886239521314.eu-west-1
    us-east-1:
      '638782101961': 638782101961.us-east-1
      '181133766305': 181133766305.us-east-1
      '886239521314': 886239521314.us-east-1
    us-west-2:
      '638782101961': 638782101961.us-west-2
      '181133766305': 181133766305.us-west-2
      '886239521314': 886239521314.us-west-2

  RegionMap:
    638782101961.us-east-1:
      az1: us-east-1b
      az2: us-east-1c
      az3: us-east-1d
      cidrblock: 10.103.0.0/16
      pubnetA: 10.103.16.0/20
      pubnetB: 10.103.32.0/20
      pubnetC: 10.103.48.0/20
      privnetA: 10.103.128.0/20
      privnetB: 10.103.144.0/20
      privnetC: 10.103.160.0/20
      privpeernetA: 10.103.2.0/23
      privpeernetB: 10.103.4.0/23
      SuperBlockUsEast1: 10.103.0.0/16
    638782101961.us-west-2:
      az1: us-west-2a
      az2: us-west-2b
      az3: us-west-2c
      # pubnetA: 10.103.64.0/21
      # pubnetB: 10.103.72.0/21
      # pubnetC: 10.103.80.0/21
      cidrblock: 10.100.32.0/19
      pubnetA: 10.100.32.0/22
      pubnetB: 10.100.36.0/22
      pubnetC: 10.100.40.0/22
      # privnetA: 10.103.176.0/21
      # privnetB: 10.103.184.0/21
      # privnetC: 10.103.192.0/21
      privnetA: 10.100.44.0/22
      privnetB: 10.100.48.0/22
      privnetC: 10.100.52.0/22
      # privpeernetA: 10.103.6.0/23
      # privpeernetB: 10.103.8.0/23
      SuperBlockUsWest2: 10.100.0.0/16
    638782101961.eu-west-1:
      az1: eu-west-1a
      az2: eu-west-1b
      az3: eu-west-1c
      cidrblock: 10.103.0.0/16
      pubnetA: 10.103.88.0/21
      pubnetB: 10.103.96.0/21
      pubnetC: 10.103.104.0/21
      privnetA: 10.103.200.0/21
      privnetB: 10.103.208.0/21
      privnetC: 10.103.216.0/21
      privpeernetA: 10.103.10.0/23
      privpeernetB: 10.103.12.0/23
      SuperBlockEuWest1: 10.103.255.255/32 #Placeholder until we deploy to this region
    181133766305.us-east-1:
      az1: us-east-1a
      az2: us-east-1c
      az3: us-east-1d
      cidrblock: 10.103.0.0/16
      pubnetA: 10.103.16.0/20
      pubnetB: 10.103.32.0/20
      pubnetC: 10.103.48.0/20
      privnetA: 10.103.128.0/20
      privnetB: 10.103.144.0/20
      privnetC: 10.103.160.0/20
      privpeernetA: 10.103.122.0/23
      privpeernetB: 10.103.124.0/23
      SuperBlockUsEast1: 10.103.0.0/16
    181133766305.us-west-2:
      az1: us-west-2a
      az2: us-west-2b
      az3: us-west-2c
      cidrblock: 10.103.0.0/16
      pubnetA: 10.103.64.0/21
      pubnetB: 10.103.72.0/21
      pubnetC: 10.103.80.0/21
      privnetA: 10.103.176.0/21
      privnetB: 10.103.184.0/21
      privnetC: 10.103.192.0/21
      privpeernetA: 10.103.126.0/23
      privpeernetB: 10.103.224.0/23
      SuperBlockUsWest2: 10.103.255.255/32 #Placeholder until we deploy to this region
    181133766305.eu-west-1:
      az1: eu-west-1a
      az2: eu-west-1b
      az3: eu-west-1c
      cidrblock: 10.103.0.0/16
      pubnetA: 10.103.88.0/21
      pubnetB: 10.103.96.0/21
      pubnetC: 10.103.104.0/21
      privnetA: 10.103.200.0/21
      privnetB: 10.103.208.0/21
      privnetC: 10.103.216.0/21
      privpeernetA: 10.103.226.0/23
      privpeernetB: 10.103.228.0/23
      SuperBlockEuWest1: 10.103.255.255/32 #Placeholder until we deploy to this region
    886239521314.us-east-1:
      az1: us-east-1b
      az2: us-east-1c
      az3: us-east-1d
      cidrblock: 10.103.0.0/16
      pubnetA: 10.103.16.0/20
      pubnetB: 10.103.32.0/20
      pubnetC: 10.103.48.0/20
      privnetA: 10.103.128.0/20
      privnetB: 10.103.144.0/20
      privnetC: 10.103.160.0/20
      privpeernetA: 10.103.242.0/23
      privpeernetB: 10.103.244.0/23
    886239521314.us-west-2:
      az1: us-west-2a
      az2: us-west-2b
      az3: us-west-2c
      cidrblock: 10.102.0.0/16
      pubnetA: 10.102.32.0/22
      pubnetB: 10.102.36.0/22
      pubnetC: 10.102.40.0/22
      privnetA: 10.102.44.0/22
      privnetB: 10.102.48.0/22
      privnetC: 10.102.52.0/22
      SuperBlockUsWest2: 10.102.0.0/16
    886239521314.eu-west-1:
      az1: eu-west-1a
      az2: eu-west-1b
      az3: eu-west-1c
      cidrblock: 10.102.0.0/16
      pubnetA: 10.102.88.0/22
      pubnetB: 10.102.92.0/22
      pubnetC: 10.102.96.0/22
      privnetA: 10.102.200.0/22
      privnetB: 10.102.204.0/22
      privnetC: 10.102.208.0/22
      SuperBlockEuWest1: 10.103.255.255/32 #Placeholder until we deploy to this region

Resources:
  AttachGateway:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref ServicesVPC

  EMRRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - elasticmapreduce.amazonaws.com
          Sid: ''
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - ec2:AuthorizeSecurityGroupEgress
            - ec2:AuthorizeSecurityGroupIngress
            - ec2:CancelSpotInstanceRequests
            - ec2:CreateNetworkInterface
            - ec2:CreateSecurityGroup
            - ec2:CreateTags
            - ec2:DeleteNetworkInterface
            - ec2:DeleteSecurityGroup
            - ec2:DeleteTags
            - ec2:DescribeAvailabilityZones
            - ec2:DescribeAccountAttributes
            - ec2:DescribeDhcpOptions
            - ec2:DescribeInstanceStatus
            - ec2:DescribeInstances
            - ec2:DescribeKeyPairs
            - ec2:DescribeNetworkAcls
            - ec2:DescribeNetworkInterfaces
            - ec2:DescribePrefixLists
            - ec2:DescribeRouteTables
            - ec2:DescribeSecurityGroups
            - ec2:DescribeSpotInstanceRequests
            - ec2:DescribeSpotPriceHistory
            - ec2:DescribeSubnets
            - ec2:DescribeVpcAttribute
            - ec2:DescribeVpcEndpoints
            - ec2:DescribeVpcEndpointServices
            - ec2:DescribeVpcs
            - ec2:DetachNetworkInterface
            - ec2:ModifyImageAttribute
            - ec2:ModifyInstanceAttribute
            - ec2:RequestSpotInstances
            - ec2:RevokeSecurityGroupEgress
            - ec2:RunInstances
            - ec2:TerminateInstances
            - ec2:DeleteVolume
            - ec2:DescribeVolumeStatus
            - ec2:DescribeVolumes
            - ec2:DetachVolume
            - iam:GetRole
            - iam:GetRolePolicy
            - iam:ListInstanceProfiles
            - iam:ListRolePolicies
            - iam:PassRole
            - s3:CreateBucket
            - s3:Get*
            - s3:List*
            - sdb:BatchPutAttributes
            - sdb:Select
            - sqs:CreateQueue
            - sqs:Delete*
            - sqs:GetQueue*
            - sqs:PurgeQueue
            - sqs:ReceiveMessage
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: emr-service

  EipA:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc

  ExternalLoadBalancerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Default security group to be used on external load balancers
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: '443'
        IpProtocol: tcp
        ToPort: '443'
      # === 52.224.7.* are Roku Los Gatos IPs (50.224.7.193 is connect.roku.com) ===
      - CidrIp: 50.224.7.192/26
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
      - CidrIp: 50.224.7.64/26
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
      - CidrIp: 50.224.7.32/27
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
      - CidrIp: 50.224.7.128/26
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
      # Old Saratoga office
      #- CidrIp: 216.38.147.4/32
      #  FromPort: '80'
      #  IpProtocol: tcp
      #  ToPort: '80'
      # Lambda load testing NAT gateway 1 from DEV account
      - CidrIp: 34.198.22.157/32
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
      # Lambda load testing NAT gateway 2 from DEV account
      - CidrIp: 52.22.215.55/32
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
      # ec2-52-8-254-63.us-west-1.compute.amazonaws.com AWS VPN (vpn.roku.com)
      - CidrIp: 52.8.254.63/32
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
      # ec2-52-40-46-133.us-west-2.compute.amazonaws.com Jenkins PTest-2
      - CidrIp: 52.40.46.133/32
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
      # ec2-35-166-205-224.us-west-2.compute.amazonaws.com Jenkins PTest-3
      - CidrIp: 35.166.205.224/32
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'  
      # 638782101961 ec2-52-2-71-189.compute-1.amazonaws.com sr-load-test-new-2
      - CidrIp: 52.2.71.189/32
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
      # 638782101961 ec2-52-73-161-25.compute-1.amazonaws.com sr-load-test-new-1
      - CidrIp: 52.73.161.25/32
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
      # 181133766305 ec2-52-206-90-98.compute-1.amazonaws.com NAT Gateway
      - CidrIp: 52.206.90.98/32
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
      # 181133766305 ec2-52-206-82-198.compute-1.amazonaws.com NAT Gateway
      - CidrIp: 52.206.82.198/32
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
      # 886239521314 52.207.68.237 us-east-1d/us-east-1e NAT Gateway
      - CidrIp: 52.207.68.237/32
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
      # 886239521314 52.207.167.16 us-east-1b/us-east-1c NAT Gateway
      - CidrIp: 52.207.167.16/32
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
      # 886239521314 52.51.131.59 eu-west-1a/eu-west-1b/eu-west-1c NAT Gateway
      - CidrIp: 52.51.131.59/32
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
      # 886239521314 52.207.68.237 us-east-1d/us-east-1e NAT Gateway
      - CidrIp: 52.207.68.237/32
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
      # 886239521314 52.207.167.16 us-east-1b/us-east-1c NAT Gateway
      - CidrIp: 52.207.167.16/32
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
      # 886239521314 52.51.131.59 eu-west-1a/eu-west-1b/eu-west-1c NAT Gateway
      - CidrIp: 52.51.131.59/32
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
      # ADD MORE IPs HERE. MAKE SURE TO EXPLAIN YOUR INSTANCE (IP and account)
      # Note that every IP you add is a SECURITY RISK.
      VpcId: !Ref ServicesVPC

  KeyRotateRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ecs-tasks.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - dynamodb:Batch*
            - dynamodb:Describe*
            - dynamodb:DeleteItem
            - dynamodb:Get*
            - dynamodb:List*
            - dynamodb:Query
            - dynamodb:PutItem
            - dynamodb:Scan
            - dynamodb:UpdateItem
            Effect: Allow
            Resource:
            - arn:aws:dynamodb:*:*:table/TokenKeysV2
            - arn:aws:dynamodb:*:*:table/archaiusProperties
            - arn:aws:dynamodb:*:*:table/KeyRotateProperties
          Version: '2012-10-17'
        PolicyName: iam-service

  TokenServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ecs-tasks.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - dynamodb:Get*
            - dynamodb:List*
            - dynamodb:Query
            - dynamodb:Scan
            Effect: Allow
            Resource:
            - arn:aws:dynamodb:*:*:table/TokenKeysV2
            - arn:aws:dynamodb:*:*:table/DevicePermissions
            - arn:aws:dynamodb:*:*:table/archaiusProperties
          - Action:
            - lambda:InvokeFunction
            Effect: Allow
            Resource:
            - arn:aws:lambda:*:911173767732:function:EB-Prod-VPC-Proxy
            - arn:aws:lambda:*:911173767732:function:AB-Bucketizer-Connect-Test
          Version: '2012-10-17'
        PolicyName: iam-service

  IAMServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
            - lambda.amazonaws.com
            - dax.amazonaws.com
            - ssm.amazonaws.com
            - ecs.amazonaws.com
            - ecs-tasks.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - athena:*
            - autoscaling:Describe*
            - batch:*
            - cloudwatch:*
            - dax:Create*
            - ec2:AttachNetworkInterface
            - ec2:CreateNetworkInterface
            - ec2:CreateNetworkInterfacePermission
            - ec2:DeleteNetworkInterface
            - ec2:DeleteNetworkInterfacePermission
            - ec2:DetachNetworkInterface
            - iam:GetRole
            - iam:PassRole
            - ec2:Describe*
            - ec2:Get*
            - ec2:AssociateAddress
            - ec2:DisassociateAddress
            - ecs:*
            - ecr:BatchCheckLayerAvailability
            - ecr:BatchGetImage
            - ecr:GetDownloadUrlForLayer
            - ecr:GetAuthorizationToken
            - elasticloadbalancing:Describe*
            - elasticloadbalancing:Deregister*
            - elasticloadbalancing:Register*
            - elasticmapreduce:Describe*
            - elasticmapreduce:ListBootstrapActions
            - elasticmapreduce:ListClusters
            - elasticmapreduce:ListInstanceGroups
            - elasticmapreduce:ListInstances
            - elasticmapreduce:ListSteps
            - es:*
            - firehose:*
            - kinesis:*
            - kms:Decrypt
            - logs:*
            - lambda:Get*
            - lambda:Invoke*
            - lambda:List*
            - s3:*
            - sns:*
            - sqs:*
            - swf:ListDomains
            - swf:RegisterWorkflowType
            - swf:RegisterActivityType
            - xray:*
            Effect: Allow
            Resource: '*'
          - Action:
            - dynamodb:Batch*
            - dynamodb:Describe*
            - dynamodb:DeleteItem
            - dynamodb:Get*
            - dynamodb:List*
            - dynamodb:Query
            - dynamodb:PutItem
            - dynamodb:Scan
            - dynamodb:UpdateItem
            Effect: Allow
            NotResource: arn:aws:dynamodb:*:*:table/TokenKeysV2
          - Action:
            - dynamodb:GetItem
            - dynamodb:Query
            - dynamodb:BatchGetItem
            - dynamodb:Scan
            Condition:
              "ForAllValues:StringEquals":
                "dynamodb:Attributes":
                  - id
                  - createTime
                  - name
                  - publicKey
                  - revokedForVerification
              "StringEqualsIfExists":
                "dynamodb:Select": SPECIFIC_ATTRIBUTES
                "dynamodb:ReturnValues":
                  - NONE
                  - UPDATED_OLD
                  - UPDATED_NEW
            Effect: Allow
            Resource: arn:aws:dynamodb:*:*:table/TokenKeysV2
          - Action:
            - dynamodb:CreateTable
            Effect: Allow
            Resource: arn:aws:dynamodb:*:*:table/*StreamProcessor
          - Action:
            - autoscaling:Create*
            - dynamodb:DeleteTable
            - ec2:CreateVpc*
            - ec2:CreateVpn*
            - ec2:CreateSecurityGroup*
            - ec2:AuthorizeSecurityGroup*
            - elasticache:Create*
            - elasticache:Delete*
            - es:Create*
            - es:Delete*
            - kinesis:Create*
            - kinesis:Delete*
            - lambda:Create*
            - lambda:Delete*
            - s3:Create*
            - s3:DeleteBucket
            - sqs:CreateQueue
            - sqs:DeleteQueue
            Effect: Deny
            Resource: '*'
            Sid: Stmt1455215831217
          Version: '2012-10-17'
        PolicyName: iam-service

  InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: /
      Roles:
      - !Ref IAMServiceRole

  InstanceSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Default security group to be used on all instances in VPC
      SecurityGroupIngress:
      # These whitelisted IPs are also present in other stacks so care should be taken to keep those updated
      # with appropriate IPs from this list.
      # The stacks in question are:
      # docs-cf.yaml (documentation whitelist for s3)
      # ecs-data.cf.yaml (elasticsearch whitelist)
      # search3cloudfront.cf.json (whitelist for s3 uploads of custom roku artwork)
      # === 52.224.7.* are Roku Los Gatos IPs ===
      - CidrIp: 50.224.7.192/26
        FromPort: '0'
        IpProtocol: tcp
        ToPort: '65535'
      - CidrIp: 50.224.7.64/26
        FromPort: '0'
        IpProtocol: tcp
        ToPort: '65535'
      - CidrIp: 50.224.7.32/27
        FromPort: '0'
        IpProtocol: tcp
        ToPort: '65535'
      - CidrIp: 50.224.7.128/26
        FromPort: '0'
        IpProtocol: tcp
        ToPort: '65535'
      # Old Saratoga office
      #- CidrIp: 216.38.147.4/32
      #  FromPort: '0'
      #  IpProtocol: tcp
      #  ToPort: '65535'
      # Lambda load testing NAT gateway 1 from DEV account
      - CidrIp: 34.198.22.157/32
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
      # Lambda load testing NAT gateway 2 from DEV account
      - CidrIp: 52.22.215.55/32
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
      # ec2-52-40-46-133.us-west-2.compute.amazonaws.com Jenkins NAT IP az us-west-2b
      - CidrIp: 52.40.46.133/32
        FromPort: '0'
        IpProtocol: tcp
        ToPort: '65535'
      # ec2-52-8-254-63.us-west-1.compute.amazonaws.com AWS VPN (vpn.roku.com)
      - CidrIp: 52.8.254.63/32
        FromPort: '0'
        IpProtocol: tcp
        ToPort: '65535'
      # 638782101961 ec2-52-2-71-189.compute-1.amazonaws.com sr-load-test-new-2
      - CidrIp: 52.2.71.189/32
        FromPort: '0'
        IpProtocol: tcp
        ToPort: '65535'
      # 638782101961 ec2-52-205-50-67.compute-1.amazonaws.com sr-load-test-new-3
      - CidrIp: 52.205.50.67/32
        FromPort: '0'
        IpProtocol: tcp
        ToPort: '65535'
      # 638782101961 ec2-52-205-229-65.compute-1.amazonaws.com sr-load-test-new-5
      - CidrIp: 52.205.229.65/32
        FromPort: '0'
        IpProtocol: tcp
        ToPort: '65535'
      # 638782101961 ec2-52-205-233-214.compute-1.amazonaws.com sr-load-test-new-4
      - CidrIp: 52.205.233.214/32
        FromPort: '0'
        IpProtocol: tcp
        ToPort: '65535'
      # 638782101961 ec2-52-73-161-25.compute-1.amazonaws.com sr-load-test-new-1
      - CidrIp: 52.73.161.25/32
        FromPort: '0'
        IpProtocol: tcp
        ToPort: '65535'
      # 638782101961 ec2-52-206-94-140.compute-1.amazonaws.com sr-load-test-new-0
      - CidrIp: 52.206.94.140/32
        FromPort: '0'
        IpProtocol: tcp
        ToPort: '65535'
      # 9638782101961 ec2-52-205-189-73.compute-1.amazonaws.com sr-load-test-new-6
      - CidrIp: 52.205.189.73/32
        FromPort: '0'
        IpProtocol: tcp
        ToPort: '65535'
      # 638782101961 ec2-52-206-95-166.compute-1.amazonaws.com sr-load-test-new-7
      - CidrIp: 52.206.95.166/32
        FromPort: '0'
        IpProtocol: tcp
        ToPort: '65535'
      # 638782101961 ec2-52-206-80-250.compute-1.amazonaws.com sr-load-test-new-8
      - CidrIp: 52.206.80.250/32
        FromPort: '0'
        IpProtocol: tcp
        ToPort: '65535'
      # 638782101961 ec2-52-206-95-29.compute-1.amazonaws.com sr-load-test-new-9
      - CidrIp: 52.206.95.29/32
        FromPort: '0'
        IpProtocol: tcp
        ToPort: '65535'
      - CidrIp: !FindInMap [RegionMap, !FindInMap [AccountMap, 'us-east-1', !Ref "AWS::AccountId"], SuperBlockUsEast1] 
        FromPort: '0'
        IpProtocol: tcp
        ToPort: '65535'
      - CidrIp: !FindInMap [RegionMap, !FindInMap [AccountMap, 'us-west-2', !Ref "AWS::AccountId"], SuperBlockUsWest2] 
        FromPort: '0'
        IpProtocol: tcp
        ToPort: '65535'
      # ADD MORE IPs HERE. MAKE SURE TO EXPLAIN YOUR INSTANCE (IP and account)
      # Note that every IP you add is a SECURITY RISK.
      - FromPort: '0'
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref ExternalLoadBalancerSecurityGroup
        ToPort: '65535'
      VpcId: !Ref ServicesVPC

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  InternetRoute:
    Type: "AWS::EC2::Route"
    DependsOn: AttachGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable

  NatA:
    Type: "AWS::EC2::NatGateway"
    DependsOn: AttachGateway
    Properties:
      AllocationId: !GetAtt [EipA, AllocationId]
      SubnetId: !Ref SubnetA
      Tags:
        - Key: Department
          Value: SR
        - Key: Spend_Category
          Value: ecs-batch

  NetworkACL:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId: !Ref ServicesVPC

  NetworkACLEgressEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'true'
      NetworkAclId: !Ref NetworkACL
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: '100'

  NetworkACLIngressEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'false'
      NetworkAclId: !Ref NetworkACL
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: '100'

  PrivateRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref ServicesVPC

  PrivateSubnetA:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !FindInMap [RegionMap, !FindInMap [AccountMap, !Ref "AWS::Region", !Ref "AWS::AccountId"], az1]
      CidrBlock: !FindInMap [RegionMap, !FindInMap [AccountMap, !Ref "AWS::Region", !Ref "AWS::AccountId"], privnetA]
      VpcId: !Ref ServicesVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnetA

  PrivateSubnetANatRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatA
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetANetworkACL:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      NetworkAclId: !Ref NetworkACL
      SubnetId: !Ref PrivateSubnetA

  PrivateSubnetARouteTableSubnetAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetA

  PrivateSubnetB:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !FindInMap [RegionMap, !FindInMap [AccountMap, !Ref "AWS::Region", !Ref "AWS::AccountId"], az2]
      CidrBlock: !FindInMap [RegionMap, !FindInMap [AccountMap, !Ref "AWS::Region", !Ref "AWS::AccountId"], privnetB]
      VpcId: !Ref ServicesVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnetB

  PrivateSubnetBNetworkACL:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      NetworkAclId: !Ref NetworkACL        
      SubnetId: !Ref PrivateSubnetB        

  PrivateSubnetBRouteRouteTableSubnetAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetB

  PrivateSubnetC:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !FindInMap [RegionMap, !FindInMap [AccountMap, !Ref "AWS::Region", !Ref "AWS::AccountId"], az3]
      CidrBlock: !FindInMap [RegionMap, !FindInMap [AccountMap, !Ref "AWS::Region", !Ref "AWS::AccountId"], privnetC]
      VpcId: !Ref ServicesVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnetC

  PrivateSubnetCNetworkACL:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      NetworkAclId: !Ref NetworkACL
      SubnetId: !Ref PrivateSubnetC

  PrivateSubnetCRouteRouteTableSubnetAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetC

  PeeringWithDEARouteTable:
    Type: "AWS::EC2::RouteTable"
    Condition: DeployEastRegionOnly
    Properties:
      VpcId: !Ref ServicesVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PeeringWithDEARouteTable

  VPCPeeringConnectionWithDEA:
    Type: "AWS::EC2::VPCPeeringConnection"
    Condition: DeployEastRegionOnly
    DeletionPolicy: Retain
    Properties: 
      PeerVpcId: vpc-7d8c6e1b
      VpcId: !Ref ServicesVPC
      PeerOwnerId: 182333787270
      PeerRoleArn: arn:aws:iam::182333787270:role/dea-accept-peering-connections
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPCPeeringConnectionWithDEA
  
  PeeringWithDEARoutesSubnetAssociation:
    Type: "AWS::EC2::Route"
    Condition: DeployEastRegionOnly
    DependsOn: VPCPeeringConnectionWithDEA
    Properties:
      DestinationCidrBlock: 10.220.0.0/16
      RouteTableId: !Ref PeeringWithDEARouteTable
      VpcPeeringConnectionId: !Ref VPCPeeringConnectionWithDEA

  PeeringWithDEANatDefaultRoute:
    Type: "AWS::EC2::Route"
    Condition: DeployEastRegionOnly
    DependsOn: NatA
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PeeringWithDEARouteTable
      NatGatewayId: !Ref NatA

  PeeringWithDEASubnetA:
    Type: "AWS::EC2::Subnet"
    Condition: DeployEastRegionOnly
    DependsOn: PeeringWithDEARouteTable
    Properties:
      AvailabilityZone: !FindInMap [RegionMap, !FindInMap [AccountMap, !Ref "AWS::Region", !Ref "AWS::AccountId"], az1]
      CidrBlock: !FindInMap [RegionMap, !FindInMap [AccountMap, !Ref "AWS::Region", !Ref "AWS::AccountId"], privpeernetA]
      VpcId: !Ref ServicesVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PeeringWithDEASubnetA

  PeeringWithDEASubnetANetworkACL:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Condition: DeployEastRegionOnly
    Properties:
      NetworkAclId: !Ref NetworkACL
      SubnetId: !Ref PeeringWithDEASubnetA

  PeeringWithDEASubnetARouteRouteTableSubnetAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Condition: DeployEastRegionOnly
    Properties:
      RouteTableId: !Ref PeeringWithDEARouteTable
      SubnetId: !Ref PeeringWithDEASubnetA

  PeeringWithDEASubnetB:
    Type: "AWS::EC2::Subnet"
    Condition: DeployEastRegionOnly
    Properties:
      AvailabilityZone: !FindInMap [RegionMap, !FindInMap [AccountMap, !Ref "AWS::Region", !Ref "AWS::AccountId"], az2]
      CidrBlock: !FindInMap [RegionMap, !FindInMap [AccountMap, !Ref "AWS::Region", !Ref "AWS::AccountId"], privpeernetB]
      VpcId: !Ref ServicesVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PeeringWithDEASubnetB

  PeeringWithDEASubnetBNetworkACL:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Condition: DeployEastRegionOnly
    Properties:
      NetworkAclId: !Ref NetworkACL
      SubnetId: !Ref PeeringWithDEASubnetB

  PeeringWithDEASubnetBRouteRouteTableSubnetAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Condition: DeployEastRegionOnly
    Properties:
      RouteTableId: !Ref PeeringWithDEARouteTable
      SubnetId: !Ref PeeringWithDEASubnetB

  # PeeringWithDEASubnetCRouteTableSubnetAssociation:
  #   Type: "AWS::EC2::SubnetRouteTableAssociation"
  #   Condition: DeployEastRegionOnly
  #   Properties:
  #     RouteTableId: !Ref PeeringWithDEARouteTable
  #     SubnetId: !Ref PrivateSubnetC

  RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref ServicesVPC

  S3Endpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      RouteTableIds:
      - !Ref RouteTable
      - !Ref PrivateRouteTable
      - "Fn::If":
        - DeployEastRegionOnly
        - !Ref PeeringWithDEARouteTable
        - !Ref "AWS::NoValue"
      ServiceName: !Join ['', [com.amazonaws., !Ref "AWS::Region", .s3]]
      VpcId: !Ref ServicesVPC

  # SSMEndpoint:
  #   Type: "AWS::EC2::VPCEndpoint"
  #   Properties:
  #     PolicyDocument:
  #       ServiceType: Interface
  #     RouteTableIds:
  #     - !Ref RouteTable
  #     - !Ref PrivateRouteTable
  #     - "Fn::If":
  #       - DeployEastRegionOnly
  #       - !Ref PeeringWithDEARouteTable
  #       - !Ref "AWS::NoValue"
  #     ServiceName: !Join ['', [com.amazonaws., !Ref "AWS::Region", .ssm]]
  #     VpcId: !Ref ServicesVPC

  SecurityGroupIngressPolicyInternal:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      FromPort: '-1'
      GroupId: !Ref InstanceSecurityGroup
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref InstanceSecurityGroup
      ToPort: '-1'

  ServicesVPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !FindInMap [RegionMap, !FindInMap [AccountMap, !Ref "AWS::Region", !Ref "AWS::AccountId"], cidrblock]
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
      Tags:
      - Key: Name
        Value: SR-VPC
      - Key: TemplateVersion
        Value: '6'

  SubnetA:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !FindInMap [RegionMap, !FindInMap [AccountMap, !Ref "AWS::Region", !Ref "AWS::AccountId"], az1]
      CidrBlock: !FindInMap [RegionMap, !FindInMap [AccountMap, !Ref "AWS::Region", !Ref "AWS::AccountId"], pubnetA]
      MapPublicIpOnLaunch: true
      VpcId: !Ref ServicesVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnetA

  SubnetANetworkACL:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      NetworkAclId: !Ref NetworkACL
      SubnetId: !Ref SubnetA

  SubnetARoute:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetA

  SubnetB:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !FindInMap [RegionMap, !FindInMap [AccountMap, !Ref "AWS::Region", !Ref "AWS::AccountId"], az2]
      CidrBlock: !FindInMap [RegionMap, !FindInMap [AccountMap, !Ref "AWS::Region", !Ref "AWS::AccountId"], pubnetB]
      MapPublicIpOnLaunch: true
      VpcId: !Ref ServicesVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnetB

  SubnetBNetworkACL:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      NetworkAclId: !Ref NetworkACL
      SubnetId: !Ref SubnetB

  SubnetBRoute:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetB

  SubnetC:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !FindInMap [RegionMap, !FindInMap [AccountMap, !Ref "AWS::Region", !Ref "AWS::AccountId"], az3]
      CidrBlock: !FindInMap [RegionMap, !FindInMap [AccountMap, !Ref "AWS::Region", !Ref "AWS::AccountId"], pubnetC]
      MapPublicIpOnLaunch: true
      VpcId: !Ref ServicesVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnetC

  SubnetCNetworkACL:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      NetworkAclId: !Ref NetworkACL
      SubnetId: !Ref SubnetC

  SubnetCRoute:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetC

  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
          - Action:
            - dynamodb:DeleteItem
            - dynamodb:PutItem
            - cloudformation:DescribeStacks
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: root

  DynamoDBPropertyV2:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |-
          var response = require('cfn-response');
          exports.handler = function(event, context) {
              console.log('REQUEST RECEIVED:\n', JSON.stringify(event));
              var tableName = event.ResourceProperties.TableName;
              var responseData = {};
              if (tableName && event.ResourceProperties.Pairs) {
                  var aws = require('aws-sdk');
                  var docClient = new aws.DynamoDB.DocumentClient();
                  var docsadded=[];
                  var addedkeytable={};
                  var csvPairs = [];
                  if(event.ResourceProperties.CSVPairs)
                      csvPairs = event.ResourceProperties.CSVPairs.split(',');
                  csvPairs.forEach(function(element, index, array){
                      event.ResourceProperties.Pairs.push(element.trim());
                  });
                  event.ResourceProperties.Pairs.forEach(function(element, index, array){
                      var n = element.indexOf('=');
                      if(n>0) {
                          if(event.RequestType == 'Create' || event.RequestType == 'Update'){
                              docsadded.push({TableName: tableName, Item:{key: element.substring(0, n), value: element.substring(n+1)}});
                              addedkeytable[element.substring(0, n)]=tableName;
                          }
                      }
                  });
                  if (event.RequestType == 'Update' && event.OldResourceProperties && event.OldResourceProperties.Pairs && event.OldResourceProperties.TableName ) {
                      csvPairs = [];
                      if(event.OldResourceProperties.CSVPairs)
                          csvPairs = event.OldResourceProperties.CSVPairs.split(',');
                      csvPairs.forEach(function(element, index, array){
                          event.OldResourceProperties.Pairs.push(element.trim());
                      });
                  }
                  if(docsadded.length == 0) {
                      response.send(event, context, response.SUCCESS);
                      return;
                  }
                  var completed=0;
                  var success=true;
                  var ddcallback = function(err, data){
                      completed++;
                      if(err) {
                          success = false;
                      }
                      if(completed == docsadded.length){
                          if(success){
                              response.send(event, context, response.SUCCESS, responseData, tableName);
                          } else {
                              responseData = { Error: 'Insert to ' + tableName + ' failed' };
                              console.log(responseData.Error + ':\n', err);
                              response.send(event, context, response.FAILED, responseData, tableName);
                          }
                      }
                  };
                  docsadded.forEach(function(element, index, array){
                      console.log('Adding:\n',JSON.stringify(element));
                      docClient.put(element, ddcallback);
                  });
              } else {
                  responseData = {Error: 'Table name or pairs not specified'};
                  console.log(responseData.Error);
                  response.send(event, context, response.FAILED, responseData);
              }
          };
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs4.3
      Timeout: '30'

Outputs:
  AvailabilityZoneA:
    Description: Availability Zone A
    Value: !FindInMap [RegionMap, !FindInMap [AccountMap, !Ref "AWS::Region", !Ref "AWS::AccountId"], az1]
    Export:
      Name: !Sub ${AWS::StackName}-AZ1
  AvailabilityZoneB:
    Description: Availability Zone B
    Value: !FindInMap [RegionMap, !FindInMap [AccountMap, !Ref "AWS::Region", !Ref "AWS::AccountId"], az2]
    Export:
      Name: !Sub ${AWS::StackName}-AZ2
  AvailabilityZoneC:
    Description: Availability Zone C
    Value: !FindInMap [RegionMap, !FindInMap [AccountMap, !Ref "AWS::Region", !Ref "AWS::AccountId"], az3]
    Export:
      Name: !Sub ${AWS::StackName}-AZ3
  DynamoDBPropertyArn:
    Description: Dynamo DB property value insertion lambda
    Value: !GetAtt DynamoDBPropertyV2.Arn
    Export:
      Name: !Sub "${AWS::StackName}-DynamoDBPropertyArn"
  EipA:
    Description: Elastic IP for NAT Gateway associated to subnet A
    Value: !Ref EipA
  ExtELBSecurityGroup:
    Description: Security group for external ELB in VPC
    Value: !Ref ExternalLoadBalancerSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-ExtELBSecurityGroup
  IAMServiceRoleName:
    Description: Name of services IAM Role
    Value: !Ref InstanceProfile
    Export:
      Name: !Sub ${AWS::StackName}-InstanceProfile
  InstanceSecurityGroup:
    Description: Internal security group for instances in VPC
    Value: !Ref InstanceSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-InstanceSecurityGroup
  KeyRotateRoleARN:
    Description: ARN for key rotate task IAM Role
    Value: !GetAtt KeyRotateRole.Arn
    Export:
      Name: !Sub ${AWS::StackName}-KeyRotateRoleARN
  PrivateRouteTable:
    Description: Route table associated to all private subnets
    Value: !Ref PrivateRouteTable
    Export:
      Name: !Sub ${AWS::StackName}-PrivateRouteTable
  PrivateSubnetA:
    Description: Private Subnet A
    Value: !Ref PrivateSubnetA
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnetA
  PrivateSubnetB:
    Description: Private Subnet B
    Value: !Ref PrivateSubnetB
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnetB
  PrivateSubnetC:
    Description: Private Subnet C
    Value: !Ref PrivateSubnetC
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnetC
  PeeringWithDEARouteTable:
    Description: Route table associated to all private subnets
    Condition: DeployEastRegionOnly
    Value: !Ref PeeringWithDEARouteTable
    Export:
      Name: !Sub ${AWS::StackName}-PeeringWithDEARouteTable
  PeeringWithDEASubnetA:
    Description: Peering with DEA Subnet A
    Condition: DeployEastRegionOnly
    Value: !Ref PeeringWithDEASubnetA
    Export:
      Name: !Sub ${AWS::StackName}-PeeringWithDEASubnetA
  PeeringWithDEASubnetB:
    Description: Peering with DEA Subnet B
    Condition: DeployEastRegionOnly
    Value: !Ref PeeringWithDEASubnetB
    Export:
      Name: !Sub ${AWS::StackName}-PeeringWithDEASubnetB
  RouteTable:
    Description: Public subnets route table id
    Value: !Ref RouteTable
  ServiceRoleARN:
    Description: ARN for services IAM Role
    Value: !GetAtt IAMServiceRole.Arn
    Export:
      Name: !Sub ${AWS::StackName}-ServiceRoleArn
  SubnetA:
    Description: Subnet A
    Value: !Ref SubnetA
    Export:
      Name: !Sub ${AWS::StackName}-SubnetA
  SubnetB:
    Description: Subnet B
    Value: !Ref SubnetB
    Export:
      Name: !Sub ${AWS::StackName}-SubnetB
  SubnetC:
    Description: Subnet C
    Value: !Ref SubnetC
    Export:
      Name: !Sub ${AWS::StackName}-SubnetC
  TokenServiceRoleARN:
    Description: ARN for key rotate task IAM Role
    Value: !GetAtt TokenServiceRole.Arn
    Export:
      Name: !Sub ${AWS::StackName}-TokenServiceRoleARN
  VPCID:
    Description: ID of the created VPC
    Value: !Ref ServicesVPC
    Export:
      Name: !Sub ${AWS::StackName}-VPCID
