Description: Template specifying global services like CloudFront and DNS. Deploy only in us-east-1.

Parameters:
  CloudFrontJWTToken:
    Description: Token to use when calling shared content apis
    NoEcho: true
    Type: String
    MinLength: 10
  JwtTokenAuthenticationStackName:
    AllowedPattern: \S+
    Default: jwt-edge-token
    Description: Name of jwt token authentication stack name without the dev/qa/prod
    Type: String
  AthenaPartitionLoaderStackName:
    Type: String
    Description: Name of athena partition loader stack (without the suffix -dev/-qa/-prod etc)
    Default: athena-partition-loader
    AllowedPattern: \S+
  ECSStackName:
    Type: String
    Description: Name of sr-blue stack
    Default: sr-blue
    AllowedPattern: \S+

Mappings:
  AccountMap:
    '181133766305':
      acmapi2cert: "45b2c490-8051-459d-9f13-e451725485bd"
      srcert: "96439d78-b962-45ce-9c96-5f37b47b918b"
      contentorigin: "content-int."
      OAI: E3BEJX313U1IAP
      R53ZID: Z1LP7Z9GSWXZAL
      CUID: c4a387ab0149de6755db0797c3f9fd3fffa9bc2453b33413f6ef8ee05a6691e207dbc3f0490a4ca844d6bb03bd3ea3f4
      name: qa.
    '638782101961':
      acmapi2cert: "f23a9234-8d38-4ed7-be58-de00c029f907"
      srcert: "14a96f17-ba24-4e0f-a1b3-a317f76a0e0e"
      contentorigin: "content-int."
      OAI: ESB3UAGBUW0UL
      R53ZID: Z1JWZXB7VVSAEK
      CUID: 288e9d491a9f4fce5766858424055d05f6fd5ab885bbc81683a0476e765a88e045787f00f8fa9f9c904ee6bb2dd57a21
      name: dev.
    '886239521314':
      acmapi2cert: "c2b8b5d3-4d12-4347-9dc4-4689579d6317"
      srcert: "5bffba9c-526b-4322-9110-02beca339713"
      contentorigin: "content-int."
      OAI: E1U4G9FGTLGRF
      R53ZID: Z162YRWDIGBA5
      CUID: a6daa665fe32dba705a6a57a4015f45f32659a7a9df279205aba4f8911df66a10928eae9b10d6dc996d74ea7c416de4e
      name: ''

  CertMap:
    us-east-1:
      '181133766305': "96439d78-b962-45ce-9c96-5f37b47b918b"
      '638782101961': "14a96f17-ba24-4e0f-a1b3-a317f76a0e0e"
      '886239521314': "5bffba9c-526b-4322-9110-02beca339713"
    us-west-2:
      '638782101961': "34b996d2-d9d8-464a-bc4c-f3b2077aad6a"
      '886239521314': "0f2d0196-2c25-47bd-8d85-af47cb866200"

  RegionMap:
    us-east-1:
      S3WebsiteEndpoint: s3-website-us-east-1.amazonaws.com
    us-west-1:
      S3WebsiteEndpoint: s3-website-us-west-1.amazonaws.com
    us-west-2:
      S3WebsiteEndpoint: s3-website-us-west-2.amazonaws.com
    eu-west-1:
      S3WebsiteEndpoint: s3-website-eu-west-1.amazonaws.com
    ap-southeast-1:
      S3WebsiteEndpoint: s3-website-ap-southeast-1.amazonaws.com
    ap-southeast-2:
      S3WebsiteEndpoint: s3-website-ap-southeast-2.amazonaws.com
    ap-northeast-1:
      S3WebsiteEndpoint: s3-website-ap-northeast-1.amazonaws.com
    sa-east-1:
      S3WebsiteEndpoint: s3-website-sa-east-1.amazonaws.com

Conditions:
  IsNotProdAccount: !Not [!Equals [!Ref "AWS::AccountId", '886239521314']]

Resources:
  API2DNSRecord:
    Type: "AWS::Route53::RecordSet"
    Properties:
      AliasTarget:
        DNSName: !GetAtt API2CloudFrontDistribution.DomainName
        EvaluateTargetHealth: false
        HostedZoneId: Z2FDTNDATAQYW2
      Comment: DNS name for cloudfront
      HostedZoneName: !Join ['', [!FindInMap [AccountMap, !Ref "AWS::AccountId", name], sr.roku.com.]]
      Name: !Join ['', [api2., !FindInMap [AccountMap,!Ref "AWS::AccountId", name], sr.roku.com. ]]
      Type: A

  EPGREGDNSRecord:
    Type: "AWS::Route53::RecordSet"
    Properties:
      AliasTarget:
        DNSName:
          Fn::ImportValue: !Sub "${ECSStackName}-OTALoadBalancerDNSName"
        EvaluateTargetHealth: false
        HostedZoneId:
          Fn::ImportValue: !Sub "${ECSStackName}-OTALoadBalancerHostedZoneId"
      Comment: DNS name for epg2 via cloudfront
      HostedZoneName: !Join ['', [!FindInMap [AccountMap, !Ref "AWS::AccountId", name], sr.roku.com.]]
      Name: !Join ['', [epgreg., !FindInMap [AccountMap,!Ref "AWS::AccountId", name], sr.roku.com. ]]
      Type: A

  ContentDNSRecord:
    Type: "AWS::Route53::RecordSet"
    Properties:
      AliasTarget:
        DNSName: !GetAtt ContentServiceCloudFrontDistribution.DomainName
        EvaluateTargetHealth: false
        HostedZoneId: Z2FDTNDATAQYW2
      Comment: DNS name for content service via cloudfront
      HostedZoneName: !Join ['', [!FindInMap [AccountMap, !Ref "AWS::AccountId", name], sr.roku.com.]]
      Name: !Join ['', [content., !FindInMap [AccountMap,!Ref "AWS::AccountId", name], sr.roku.com. ]]
      Type: A

  ImagesRoute53CloudFrontAliasRecord:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId:
        !FindInMap [AccountMap, !Ref "AWS::AccountId", R53ZID]
      RecordSets:
      - AliasTarget:
          HostedZoneId: Z2FDTNDATAQYW2
          DNSName:
            !GetAtt
            - ImagesServiceCloudFrontDistribution
            - DomainName
        Type: A
        Name:
          !Join ['', [images., !FindInMap [AccountMap, !Ref "AWS::AccountId", name], sr.roku.com]]
    DependsOn: ImagesServiceCloudFrontDistribution

  API2CloudFrontLogsBucket:
    DeletionPolicy: Retain
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: BucketOwnerFullControl
      BucketName:
        !Join
        - ''
        - - cloudfront-logs-
          - !Ref AWS::AccountId
      VersioningConfiguration:
        Status: Suspended
      LifecycleConfiguration:
        Rules:
        -
          ExpirationInDays: 90
          Status: Enabled
      NotificationConfiguration:
        TopicConfigurations:
        -
          Topic:
            Fn::ImportValue: !Sub "${AthenaPartitionLoaderStackName}-AthenaPartitionLoaderSNSTopicArn"
          Event: "s3:ObjectCreated:*"
      Tags:
        - Key: Name
          Value: cloudfront-logs-bucket
        - Key: Department
          Value: SR
        - Key: Spend_Category
          Value: monitoring

  API2CloudFrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Aliases:
          - !Join ['', [api2., !FindInMap [AccountMap,!Ref "AWS::AccountId", name], sr.roku.com ]]
        Logging:
          IncludeCookies: 'true'
          Prefix: api2
          Bucket:
            !GetAtt
            - API2CloudFrontLogsBucket
            - DomainName
        DefaultCacheBehavior:
          AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
          CachedMethods:
            - HEAD
            - GET
          Compress: true
          ForwardedValues:
            Headers:
              - "*"
            QueryString: true
          MinTTL: 0
          TargetOriginId: api2elb
          ViewerProtocolPolicy : https-only
        CacheBehaviors:
          - AllowedMethods:
              - HEAD
              - GET
            CachedMethods:
              - HEAD
              - GET
            Compress: true
            MinTTL: 3600
            DefaultTTL: 3600
            ForwardedValues:
              Headers:
                - "x-roku-reserved-culture-code"
                - "x-roku-reserved-channel-store-code"
                - "x-roku-reserved-model-name"
                - "x-roku-reserved-display"
              QueryString: false
            PathPattern: "/search/*"
            TargetOriginId: searchelb
            ViewerProtocolPolicy : https-only

          - AllowedMethods:
              - HEAD
              - GET
            CachedMethods:
              - HEAD
              - GET
            Compress: true
            ForwardedValues:
              Headers:
                - "x-roku-reserved-culture-code"
                - "x-roku-reserved-channel-store-code"
                - "x-roku-reserved-model-name"
                - "x-roku-reserved-display"
              QueryString: true
            PathPattern: "/homescreen/v2/plugins/collections/epg*"
            TargetOriginId: api2elb-public
            ViewerProtocolPolicy : https-only

          - AllowedMethods:
              - HEAD
              - GET
            CachedMethods:
              - HEAD
              - GET
            Compress: true
            ForwardedValues:
              Headers:
                - "x-roku-reserved-culture-code"
                - "x-roku-reserved-channel-store-code"
                - "x-roku-reserved-model-name"
                - "x-roku-reserved-display"
              QueryString: true
            PathPattern: "/homescreen/v2/plugins/collections/mlt*"
            TargetOriginId: api2elb-public
            ViewerProtocolPolicy : https-only


        Comment: API acceleration for API2 services
        Enabled: true
        HttpVersion: http2
        Origins:
          - CustomOriginConfig:
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
                - TLSv1
                - TLSv1.1
                - TLSv1.2
            OriginCustomHeaders:
              - HeaderName: "CF-Request"
                HeaderValue: "true"
            DomainName: !Join ['', [api2-int., !FindInMap [AccountMap,!Ref "AWS::AccountId", name],sr.roku.com]]
            Id: api2elb
          - CustomOriginConfig:
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
                - TLSv1
                - TLSv1.1
                - TLSv1.2
            DomainName: !Join ['', [api2-int., !FindInMap [AccountMap,!Ref "AWS::AccountId", name],sr.roku.com]]
            Id: api2elb-public
            OriginCustomHeaders:
              - HeaderName: "Authorization"
                HeaderValue: !Join ['', ["Bearer ", !Ref CloudFrontJWTToken]]
          - CustomOriginConfig:
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
                - TLSv1
                - TLSv1.1
                - TLSv1.2
            OriginCustomHeaders:
              - HeaderName: "CF-Request"
                HeaderValue: "true"
            DomainName: !Join ['', [search-int., !FindInMap [AccountMap,!Ref "AWS::AccountId", name],sr.roku.com]]
            Id: searchelb
        PriceClass: PriceClass_All
        ViewerCertificate:
          AcmCertificateArn: !Join ['',['arn:aws:acm:us-east-1:', !Ref "AWS::AccountId", ":certificate/", !FindInMap [AccountMap, !Ref "AWS::AccountId", acmapi2cert] ]]
          SslSupportMethod: sni-only
      Tags:
        - Key: Name
          Value: homescreen-dist
        - Key: Department
          Value: SR
        - Key: Spend_Category
          Value: homescreen
    DependsOn: API2CloudFrontLogsBucket

  ContentServiceCloudFrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Aliases:
          - !Join ['', [content., !FindInMap [AccountMap,!Ref "AWS::AccountId", name], sr.roku.com ]]
        Logging:
          IncludeCookies: 'true'
          Prefix: content
          Bucket:
            !GetAtt
            - API2CloudFrontLogsBucket
            - DomainName
        DefaultCacheBehavior:
          AllowedMethods:
            - HEAD
            - GET
          CachedMethods:
            - HEAD
            - GET
          Compress: true
          MinTTL: 1800
          MaxTTL: 86400
          DefaultTTL: 3600
          ForwardedValues:
            Headers:
              - "x-roku-reserved-culture-code"
              - "x-roku-reserved-channel-store-code"
              - "x-roku-reserved-model-name"
              - "x-roku-reserved-display"
            QueryString: true
          TargetOriginId: api2elb-public
          ViewerProtocolPolicy : https-only
          LambdaFunctionAssociations:
            Fn::If:
              - IsNotProdAccount
              - - EventType: viewer-request
                  LambdaFunctionARN:
                    Fn::ImportValue: !Sub "${JwtTokenAuthenticationStackName}-VerifyLambdaFunctionQualifiedArn"
              - []
        Comment: Content Service distribution
        Enabled: true
        HttpVersion: http2
        Origins:
          - CustomOriginConfig:
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
                - TLSv1
                - TLSv1.1
                - TLSv1.2
            DomainName: !Join ['', [!FindInMap [AccountMap,!Ref "AWS::AccountId", contentorigin], !FindInMap [AccountMap,!Ref "AWS::AccountId", name],sr.roku.com]]
            Id: api2elb-public
            OriginCustomHeaders:
              - HeaderName: "Authorization"
                HeaderValue: !Join ['', ["Bearer ", !Ref CloudFrontJWTToken]]

        PriceClass: PriceClass_All
        ViewerCertificate:
          AcmCertificateArn: !Join ['',['arn:aws:acm:us-east-1:', !Ref "AWS::AccountId", ":certificate/", !FindInMap [AccountMap, !Ref "AWS::AccountId", acmapi2cert] ]]
          SslSupportMethod: sni-only
        CustomErrorResponses:
          - ErrorCode: 500
            ErrorCachingMinTTL: 60
          - ErrorCode: 503
            ErrorCachingMinTTL: 60
      Tags:
        - Key: Name
          Value: content-dist
        - Key: Department
          Value: SR
        - Key: Spend_Category
          Value: content-svcs
    DependsOn: API2CloudFrontLogsBucket

  PostProcessedAssetsS3Bucket:
    DeletionPolicy: Retain
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: BucketOwnerFullControl
      BucketName:
        !Join ['', [post-processed-assets-, !Ref "AWS::AccountId", ".", !FindInMap [AccountMap, !Ref "AWS::AccountId", name], sr.roku.com]]
      WebsiteConfiguration:
        IndexDocument: index.html
        RoutingRules:
        - RoutingRuleCondition:
            HttpErrorCodeReturnedEquals: '404'
          RedirectRule:
            Protocol: https
            HostName: !Join ['', [images-svc., !FindInMap [AccountMap, !Ref "AWS::AccountId", name], sr.roku.com]]
            HttpRedirectCode: '307'
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
          - Authorization
          AllowedMethods:
          - GET
          MaxAge: 3000
          AllowedOrigins:
          - '*'
      VersioningConfiguration:
        Status: Suspended
      Tags:
        - Key: Name
          Value: images-s3-bucket
        - Key: Department
          Value: SR
        - Key: Spend_Category
          Value: images-svcs

  S3PolicyPostProcessedAssetsS3Bucket:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action: s3:GetObject
          Principal: "*"
          Resource:
            !Join
            - ''
            - - 'arn:aws:s3:::'
              - !Ref PostProcessedAssetsS3Bucket
              - /*
          Effect: Allow
          Sid: S3PolicyPostProcessedS3Bucket20160715
      Bucket:
        !Ref PostProcessedAssetsS3Bucket
    DependsOn: PostProcessedAssetsS3Bucket

  ImagesServiceCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Join ['', [images., !FindInMap [AccountMap,!Ref "AWS::AccountId", name], sr.roku.com ]]
        Logging:
          IncludeCookies: 'true'
          Prefix: images
          Bucket:
            !GetAtt
            - API2CloudFrontLogsBucket
            - DomainName
        DefaultCacheBehavior:
          TargetOriginId: ImagesServiceCloudFrontDistribution
          ViewerProtocolPolicy : https-only
          ForwardedValues:
            Headers:
            - Origin
            Cookies:
              Forward: none
            QueryString: true
          MinTTL: '0'
          MaxTTL: '604800'
          DefaultTTL: '0'
          AllowedMethods:
          - GET
          - HEAD
          CachedMethods:
          - GET
          - HEAD
          Compress: true
        Comment: cloudFront distribution with s3 as website origin redirects to image resize svc on a miss
        Enabled: 'true'
        HttpVersion: http2
        Origins:
        - CustomOriginConfig:
            HTTPPort: 80
            HTTPSPort: 443
            OriginProtocolPolicy: http-only
          Id: ImagesServiceCloudFrontDistribution
          DomainName: !Join ['', [!Ref PostProcessedAssetsS3Bucket, '.', !FindInMap [RegionMap, !Ref 'AWS::Region', S3WebsiteEndpoint]]]
        DefaultRootObject: index.html
        PriceClass: PriceClass_All
        ViewerCertificate:
          AcmCertificateArn: !Join ['',['arn:aws:acm:us-east-1:', !Ref "AWS::AccountId", ":certificate/", !FindInMap [AccountMap, !Ref "AWS::AccountId", srcert] ]]
          SslSupportMethod: sni-only
      Tags:
        - Key: Name
          Value: images-dist
        - Key: Department
          Value: SR
        - Key: Spend_Category
          Value: images-svcs
    DependsOn: API2CloudFrontLogsBucket

Outputs:
  DistributionDomainName:
    Export:
      Name:
        !Sub ${AWS::StackName}-DistributionDomainName
    Description: Domain name for CF distribution
    Value:
      !Join
      - ''
      - - api2.
        - !FindInMap
          - AccountMap
          - !Ref AWS::AccountId
          - name
        - sr.roku.com

  PostProcessedAssetsS3Bucket:
    Description: Bucket with post processed assets with redirect
    Value: !Ref PostProcessedAssetsS3Bucket
    Export:
      Name: !Sub ${AWS::StackName}-PostProcessedAssetsS3Bucket

  ImagesRoute53CloudFrontAliasRecord:
    Description: Route53 DNS record for CF Distribution for image resize svc with redirect from S3
    Value: !Join ['', ['https://', images., !FindInMap [AccountMap,!Ref "AWS::AccountId", name], sr.roku.com]]
    Export:
      Name: !Sub ${AWS::StackName}-ImagesRoute53CloudFrontAliasRecord
