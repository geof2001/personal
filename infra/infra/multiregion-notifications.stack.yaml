Description: Create SQS queues for multi-region notification via SNS.

Parameters:
  DeduperStackName:
    Default: deduper
    Description: Name of deduper stack
    Type: String

Mappings:
  AccountMap:
    us-east-1:
      '638782101961': 638782101961.us-east-1
      '181133766305': 181133766305.us-east-1
      '886239521314': 886239521314.us-east-1
    us-west-2:
      '638782101961': 638782101961.us-west-2
      '181133766305': 181133766305.us-west-2
      '886239521314': 886239521314.us-west-2

  SqsNameMap:
    638782101961.us-east-1:
      SqsNameCA: deduper-ca
      SqsNameGB: deduper-gb
      SqsNameIE: deduper-ie
      SqsNameSKYUK: deduper-skyuk
      SqsNameTELSTRA: deduper-telstra
      SqsNameUS: deduper-us
      SqsNameProviderIndexer: ProviderIndexerQueue
      SqsNameCapIngestor: cap-ingestor
    638782101961.us-west-2:
      SqsNameCA: deduper-ca
      SqsNameGB: deduper-gb
      SqsNameIE: deduper-ie
      SqsNameSKYUK: deduper-skyuk
      SqsNameTELSTRA: deduper-telstra
      SqsNameUS: deduper-us
      SqsNameProviderIndexer: ProviderIndexerQueue
      SqsNameCapIngestor: cap-ingestor
    181133766305.us-east-1:
      SqsNameCA: deduper-ca
      SqsNameGB: deduper-gb
      SqsNameIE: deduper-ie
      SqsNameSKYUK: deduper-skyuk
      SqsNameTELSTRA: deduper-telstra
      SqsNameUS: deduper-us
      SqsNameProviderIndexer: ProviderIndexerQueue
      SqsNameCapIngestor: cap-ingestor
    181133766305.us-west-2:
      SqsNameCA: deduper-ca
      SqsNameGB: deduper-gb
      SqsNameIE: deduper-ie
      SqsNameSKYUK: deduper-skyuk
      SqsNameTELSTRA: deduper-telstra
      SqsNameUS: deduper-us
      SqsNameProviderIndexer: ProviderIndexerQueue
      SqsNameCapIngestor: cap-ingestor
    886239521314.us-east-1:
      SqsNameCA: deduper-ca
      SqsNameGB: deduper-gb
      SqsNameIE: deduper-ie
      SqsNameSKYUK: deduper-skyuk
      SqsNameTELSTRA: deduper-telstra
      SqsNameUS: deduper-us
      SqsNameProviderIndexer: ProviderIndexerQueue
      SqsNameCapIngestor: cap-ingestor
    886239521314.us-west-2:
      SqsNameCA: deduper-ca
      SqsNameGB: deduper-gb
      SqsNameIE: deduper-ie
      SqsNameSKYUK: deduper-skyuk
      SqsNameTELSTRA: deduper-telstra
      SqsNameUS: deduper-us
      SqsNameProviderIndexer: ProviderIndexerQueue
      SqsNameCapIngestor: cap-ingestor

Conditions:
  DeployEastRegionOnly: !Equals [!Ref "AWS::Region", 'us-east-1']
  DeployFifoIntegration: !Equals [!Ref "AWS::AccountId", '638782101961']
  DeployCap20Integration: !And
   - !Equals [!Ref "AWS::Region", 'us-east-1']
   - !Equals [!Ref "AWS::AccountId", '638782101961']


Resources:
  DeduperNotificationQueueCA:
    Type: "AWS::SQS::Queue"
    DependsOn: DeduperNotificationDlQueueCA
    Properties:
      MessageRetentionPeriod: 1209600
      QueueName: !FindInMap [SqsNameMap,!FindInMap [AccountMap,!Ref "AWS::Region",!Ref "AWS::AccountId"],SqsNameCA]
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeduperNotificationDlQueueCA.Arn
        maxReceiveCount: 3
      VisibilityTimeout: 600

  DeduperNotificationDlQueueCA:
    Type: "AWS::SQS::Queue"
    Properties:
      MessageRetentionPeriod: 345600
      QueueName: !Join ['-',[!FindInMap [SqsNameMap,!FindInMap [AccountMap,!Ref "AWS::Region",!Ref "AWS::AccountId"],SqsNameCA],"dl"]]
      VisibilityTimeout: 60

  DeduperNotificationQueueGB:
    Type: "AWS::SQS::Queue"
    DependsOn: DeduperNotificationDlQueueGB
    Properties:
      MessageRetentionPeriod: 1209600
      QueueName: !FindInMap [SqsNameMap,!FindInMap [AccountMap,!Ref "AWS::Region",!Ref "AWS::AccountId"],SqsNameGB]
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeduperNotificationDlQueueGB.Arn
        maxReceiveCount: 3
      VisibilityTimeout: 600

  DeduperNotificationDlQueueGB:
    Type: "AWS::SQS::Queue"
    Properties:
      MessageRetentionPeriod: 345600
      QueueName: !Join ['-',[!FindInMap [SqsNameMap,!FindInMap [AccountMap,!Ref "AWS::Region",!Ref "AWS::AccountId"],SqsNameGB],"dl"]]
      VisibilityTimeout: 60

  DeduperNotificationQueueIE:
    Type: "AWS::SQS::Queue"
    DependsOn: DeduperNotificationDlQueueIE
    Properties:
      MessageRetentionPeriod: 1209600
      QueueName: !FindInMap [SqsNameMap,!FindInMap [AccountMap,!Ref "AWS::Region",!Ref "AWS::AccountId"],SqsNameIE]
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeduperNotificationDlQueueIE.Arn
        maxReceiveCount: 3
      VisibilityTimeout: 600

  DeduperNotificationDlQueueIE:
    Type: "AWS::SQS::Queue"
    Properties:
      MessageRetentionPeriod: 345600
      QueueName: !Join ['-',[!FindInMap [SqsNameMap,!FindInMap [AccountMap,!Ref "AWS::Region",!Ref "AWS::AccountId"],SqsNameIE],"dl"]]
      VisibilityTimeout: 60

  DeduperNotificationQueueSKYUK:
    Type: "AWS::SQS::Queue"
    DependsOn: DeduperNotificationDlQueueSKYUK
    Properties:
      MessageRetentionPeriod: 1209600
      QueueName: !FindInMap [SqsNameMap,!FindInMap [AccountMap,!Ref "AWS::Region",!Ref "AWS::AccountId"],SqsNameSKYUK]
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeduperNotificationDlQueueSKYUK.Arn
        maxReceiveCount: 3
      VisibilityTimeout: 600

  DeduperNotificationDlQueueSKYUK:
    Type: "AWS::SQS::Queue"
    Properties:
      MessageRetentionPeriod: 345600
      QueueName: !Join ['-',[!FindInMap [SqsNameMap,!FindInMap [AccountMap,!Ref "AWS::Region",!Ref "AWS::AccountId"],SqsNameSKYUK],"dl"]]
      VisibilityTimeout: 60

  DeduperNotificationQueueTELSTRA:
    Type: "AWS::SQS::Queue"
    DependsOn: DeduperNotificationDlQueueTELSTRA
    Properties:
      MessageRetentionPeriod: 1209600
      QueueName: !FindInMap [SqsNameMap,!FindInMap [AccountMap,!Ref "AWS::Region",!Ref "AWS::AccountId"],SqsNameTELSTRA]
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeduperNotificationDlQueueTELSTRA.Arn
        maxReceiveCount: 3
      VisibilityTimeout: 600

  DeduperNotificationDlQueueTELSTRA:
    Type: "AWS::SQS::Queue"
    Properties:
      MessageRetentionPeriod: 345600
      QueueName: !Join ['-',[!FindInMap [SqsNameMap,!FindInMap [AccountMap,!Ref "AWS::Region",!Ref "AWS::AccountId"],SqsNameTELSTRA],"dl"]]
      VisibilityTimeout: 60

  DeduperNotificationQueueUS:
    Type: "AWS::SQS::Queue"
    DependsOn: DeduperNotificationDlQueueUS
    Properties:
      MessageRetentionPeriod: 1209600
      QueueName: !FindInMap [SqsNameMap,!FindInMap [AccountMap,!Ref "AWS::Region",!Ref "AWS::AccountId"],SqsNameUS]
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeduperNotificationDlQueueUS.Arn
        maxReceiveCount: 3
      VisibilityTimeout: 600

  DeduperNotificationDlQueueUS:
    Type: "AWS::SQS::Queue"
    Properties:
      MessageRetentionPeriod: 345600
      QueueName: !Join ['-',[!FindInMap [SqsNameMap,!FindInMap [AccountMap,!Ref "AWS::Region",!Ref "AWS::AccountId"],SqsNameUS],"dl"]]
      VisibilityTimeout: 60

  DeduperNotificationSnsCA:
    Type: "AWS::SNS::Topic"
    Condition: DeployEastRegionOnly
    Properties:
      DisplayName: deduper-ca
      Subscription:
        -
          Endpoint: !Join [':',["arn:aws:lambda:us-east-1",!Ref "AWS::AccountId","function","DeduperSnsNotificationToFifoSQSLambda"]]
          Protocol: "lambda"
      TopicName: deduper-ca

  DeduperNotificationSnsGB:
    Type: "AWS::SNS::Topic"
    Condition: DeployEastRegionOnly
    Properties:
      DisplayName: deduper-gb
      Subscription:
        -
          Endpoint: !Join [':',["arn:aws:lambda:us-east-1",!Ref "AWS::AccountId","function","DeduperSnsNotificationToFifoSQSLambda"]]
          Protocol: "lambda"
      TopicName: deduper-gb

  DeduperNotificationSnsIE:
    Type: "AWS::SNS::Topic"
    Condition: DeployEastRegionOnly
    Properties:
      DisplayName: deduper-ie
      Subscription:
        -
          Endpoint: !Join [':',["arn:aws:lambda:us-east-1",!Ref "AWS::AccountId","function","DeduperSnsNotificationToFifoSQSLambda"]]
          Protocol: "lambda"
      TopicName: deduper-ie

  DeduperNotificationSnsSKYUK:
    Type: "AWS::SNS::Topic"
    Condition: DeployEastRegionOnly
    Properties:
      DisplayName: deduper-skyuk
      Subscription:
        -
          Endpoint: !Join [':',["arn:aws:lambda:us-east-1",!Ref "AWS::AccountId","function","DeduperSnsNotificationToFifoSQSLambda"]]
          Protocol: "lambda"
      TopicName: deduper-skyuk

  DeduperNotificationSnsSKYIE:
    Type: "AWS::SNS::Topic"
    Condition: DeployEastRegionOnly
    Properties:
      DisplayName: deduper-skyie
      Subscription:
        -
          Endpoint: !Join [':',["arn:aws:lambda:us-east-1",!Ref "AWS::AccountId","function","DeduperSnsNotificationToFifoSQSLambda"]]
          Protocol: "lambda"
      TopicName: deduper-skyie

  DeduperNotificationSnsTELSTRA:
    Type: "AWS::SNS::Topic"
    Condition: DeployEastRegionOnly
    Properties:
      DisplayName: deduper-telstra
      TopicName: deduper-telstra

  DeduperNotificationSnsUS:
    Type: "AWS::SNS::Topic"
    Condition: DeployEastRegionOnly
    Properties:
      DisplayName: deduper-us
      Subscription:
        -
          Endpoint: !Join [':',["arn:aws:lambda:us-east-1",!Ref "AWS::AccountId","function","DeduperSnsNotificationToFifoSQSLambda"]]
          Protocol: "lambda"
      TopicName: deduper-us

  ProviderIndexerQueueDLQ:
    Type: "AWS::SQS::Queue"
    Properties:
      MessageRetentionPeriod: 604800
      QueueName: !Join ['-',[!FindInMap [SqsNameMap,!FindInMap [AccountMap,!Ref "AWS::Region",!Ref "AWS::AccountId"],SqsNameProviderIndexer],"dl"]]
      VisibilityTimeout: 600

  ProviderIndexerQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      MessageRetentionPeriod: 604800
      QueueName: !FindInMap [SqsNameMap,!FindInMap [AccountMap,!Ref "AWS::Region",!Ref "AWS::AccountId"],SqsNameProviderIndexer]
      VisibilityTimeout: 600
      RedrivePolicy:
        deadLetterTargetArn:
          !GetAtt ProviderIndexerQueueDLQ.Arn
        maxReceiveCount: 10

  CapIngestorQueueDLQ:
    Type: "AWS::SQS::Queue"
    Condition: DeployEastRegionOnly
    Properties:
      MessageRetentionPeriod: 604800
      QueueName: !Join ['-',[!FindInMap [SqsNameMap,!FindInMap [AccountMap,!Ref "AWS::Region",!Ref "AWS::AccountId"],SqsNameCapIngestor],"dl"]]
      VisibilityTimeout: 600

  CapIngestorQueue:
    Type: "AWS::SQS::Queue"
    Condition: DeployEastRegionOnly
    Properties:
      MessageRetentionPeriod: 604800
      QueueName: !FindInMap [SqsNameMap,!FindInMap [AccountMap,!Ref "AWS::Region",!Ref "AWS::AccountId"],SqsNameCapIngestor]
      VisibilityTimeout: 600
      RedrivePolicy:
        deadLetterTargetArn:
          !GetAtt CapIngestorQueueDLQ.Arn
        maxReceiveCount: 10

  ProviderIndexerSns:
    Type: "AWS::SNS::Topic"
    Condition: DeployEastRegionOnly
    Properties:
      DisplayName: provider-indexer
      Subscription:
        -
          Endpoint: !Join [':',["arn:aws:sqs:us-west-2",!Ref "AWS::AccountId",!FindInMap [SqsNameMap,!FindInMap [AccountMap,!Ref "AWS::Region",!Ref "AWS::AccountId"],SqsNameProviderIndexer]]]
          Protocol: "sqs"
        -
          Endpoint: !Join [':',["arn:aws:sqs:us-east-1",!Ref "AWS::AccountId",!FindInMap [SqsNameMap,!FindInMap [AccountMap,!Ref "AWS::Region",!Ref "AWS::AccountId"],SqsNameProviderIndexer]]]
          Protocol: "sqs"
      TopicName: provider-indexer

  ProviderIndexerSnsS3Policy:
    Type: AWS::SNS::TopicPolicy
    Condition: DeployEastRegionOnly
    Properties:
      PolicyDocument:
        Id: S3PublishPolicy
        Version: '2012-10-17'
        Statement:
        - Sid: S3Publish
          Effect: Allow
          Principal:
            Service: s3.amazonaws.com
          Action: sns:Publish
          Resource:
            - '*'
          Condition:
            ArnEquals:
              aws:SourceArn: !Sub "arn:aws:s3:::roku-search-channelfeeds-${AWS::AccountId}"
      Topics:
      - !Ref ProviderIndexerSns

  DeduperNotificationQueuePolicy:
    Type: "AWS::SQS::QueuePolicy"
    DependsOn:
    - DeduperNotificationQueueCA
    - DeduperNotificationQueueGB
    - DeduperNotificationQueueIE
    - DeduperNotificationQueueSKYUK
    - DeduperNotificationQueueTELSTRA
    - DeduperNotificationQueueUS
    - DeduperOutputNotificationQueue
    - ProviderIndexerQueue
    - CapIngestorQueue
    Properties:
      PolicyDocument:
        Id: "GlobalQueuePolicy"
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
            - sqs:*
            Principal: '*'
            Resource:
            - '*'
            Condition:
              ArnEquals:
                aws:SourceArn: !Sub 'arn:aws:sns:us-east-1:${AWS::AccountId}:*'

      Queues:
      - !Ref DeduperNotificationQueueCA
      - !Ref DeduperNotificationQueueGB
      - !Ref DeduperNotificationQueueIE
      - !Ref DeduperNotificationQueueSKYUK
      - !Ref DeduperNotificationQueueTELSTRA
      - !Ref DeduperNotificationQueueUS
      - !Ref DeduperOutputNotificationQueue
      - !Ref ProviderIndexerQueue
      - !Ref CapIngestorQueue


## Lambda function running as a CRON job to verify all subscriptions has the
## raw attribute set. This is important for sending SNS data to SQS without any
## modifications.
  VerifyMultiRegionSnsSubscriptionAttributes:
    Type: "AWS::Lambda::Function"
    Condition: DeployEastRegionOnly
    Properties:
      Code:
        ZipFile: |-
          from __future__ import print_function

          import json
          import boto3

          def lambda_handler(event, context):
              print("Received event: " + json.dumps(event))

              #create list of SNS ARNs to check.
              #NOTE: Need a better way to get list if valid SNS topics to Lambda CF template.
              # suggest adding a tag to SNS topics that need RAW delivery set to true.
              snsArns = []
              snsArns.append("deduper-ca")
              snsArns.append("deduper-gb")
              snsArns.append("deduper-ie")
              snsArns.append("deduper-skyuk")
              snsArns.append("deduper-telstra")
              snsArns.append("deduper-us")
              snsArns.append("provider-indexer")

              print('Checking the following SNS Topics for RawMessageDelivery=true attribute setting.')
              print(snsArns)

              client = boto3.client('sns')
              topics = client.list_topics()

              print('Checking...')
              for index, value in enumerate(topics['Topics']):
                  curr_arn = value['TopicArn']
                  for currArn in snsArns:
                      if currArn in curr_arn:
                          currSubs = client.list_subscriptions_by_topic(TopicArn=curr_arn)
                          for subIdx, subVal in enumerate(currSubs['Subscriptions']):
                              curr_sub = subVal['SubscriptionArn']
                              curr_protocol = subVal['Protocol']
                              if curr_protocol == 'sqs':
                                  subAttribs = client.get_subscription_attributes(SubscriptionArn=curr_sub)
                                  raw_attrib_setting = subAttribs['Attributes']['RawMessageDelivery']

                                  if raw_attrib_setting.lower() not in ['true', 't']:
                                      client.set_subscription_attributes(
                                          SubscriptionArn=curr_sub,
                                          AttributeName='RawMessageDelivery',
                                          AttributeValue='true'
                                      )
                                      print('SETTING %s RawMessageDelivery to true' % curr_sub)
                                  else:
                                      print('VALID RawMessageDelivery setting for: %s' % curr_sub)
                              else:
                                  print('NOT SETTING %s RawMessageDelivery which is only for SQS. Protocol: %s' % (curr_sub, curr_protocol))

              return 'done'

      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python2.7
      Timeout: '30'

  VerifySnsSubscriptionsCronEvent:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: cron(0/15 * * * ? *)
      Targets:
        - Arn:
            Fn::GetAtt: [ VerifyMultiRegionSnsSubscriptionAttributes , "Arn" ]
          Id:
            Ref: VerifyMultiRegionSnsSubscriptionAttributes

  VerifySnsSubscriptionsInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt: [ VerifyMultiRegionSnsSubscriptionAttributes , "Arn" ]
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt: [ VerifySnsSubscriptionsCronEvent , "Arn" ]

  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Condition: DeployEastRegionOnly
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
          - Action:
            - sns:ListTopics
            - sns:GetTopicAttributes
            - sns:SetTopicAttributes
            - sns:ListSubscriptionsByTopic
            - sns:GetSubscriptionAttributes
            - sns:SetSubscriptionAttributes
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: sns-verify-attributes-policy

  DeduperSnsNotificationToFifoSQSLambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Condition: DeployEastRegionOnly
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
          - Action:
            - sqs:GetQueueUrl
            - sqs:ListQueues
            - sqs:SendMessage
            - sqs:SetQueueAttributes
            - sqs:GetQueueAttributes
            - lambda:*
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: deduper-notificaiton-to-fifo-sqs-handoff

  DeduperSnsNotificationToFifoSQSLambda:
    Type: "AWS::Lambda::Function"
    Condition: DeployEastRegionOnly
    DependsOn: DeduperSnsNotificationToFifoSQSLambdaExecutionRole
    Properties:
      Code:
        ZipFile: |-
          from __future__ import print_function

          import json
          import boto3
          import os

          def lambda_handler(event, context):
              print("Received event: " + json.dumps(event, indent=2))
              message = event['Records'][0]['Sns']['Message']
              #messageGroupId = event['Records'][0]['Sns']['MessageAttributes']['MessageGroupId']['Value']

              print("From SNS: " + message)
              jsonMessage = json.loads(message)

              if 'domain' in jsonMessage:
                messageGroupId = jsonMessage['domain']
              else:
                messageGroupId = jsonMessage['channelStoreCode']

              print("MessageGroupId: " + messageGroupId)
              queueName = os.getenv('DEDUPER_OUTPUT_QUEUE', 'deduper-output.fifo')
              regions = os.getenv('REGIONS').split(",")

              for region in regions:
                sqs = boto3.resource('sqs', region_name=region)
                queue = sqs.get_queue_by_name(QueueName=queueName)
                print ("Posting message to queue : " + queueName + " in region: " + region)
                response = queue.send_message(
                            MessageBody=json.dumps(json.loads(message)),
                            MessageDeduplicationId= messageGroupId + jsonMessage['dataSetTag'],
                            MessageGroupId= messageGroupId)
                print ("Respose: " + str(response))

              return 'done'

      Handler: index.lambda_handler
      Role: !GetAtt DeduperSnsNotificationToFifoSQSLambdaExecutionRole.Arn
      Runtime: python2.7
      FunctionName: DeduperSnsNotificationToFifoSQSLambda
      Environment:
        Variables:
          DEDUPER_OUTPUT_QUEUE: "deduper-output.fifo"
          REGIONS: "us-east-1,us-west-2"
      Timeout: '30'
      Tags:
      - Key: Name
        Value: DeduperSnsNotificationToFifoSQSLambda
      - Key: Department
        Value: SR
      - Key: Spend_Category
        Value: cap
      - Key: Resource_Prefix
        Value: ECS-CAP-LAMBDA

  DeduperNotificationLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Condition: DeployEastRegionOnly
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt DeduperSnsNotificationToFifoSQSLambda.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref DeduperOutputNotificationSns

  DeduperNotificationSnsUSLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Condition: DeployEastRegionOnly
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt DeduperSnsNotificationToFifoSQSLambda.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref DeduperNotificationSnsUS

  DeduperNotificationSnsCALambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Condition: DeployEastRegionOnly
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt DeduperSnsNotificationToFifoSQSLambda.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref DeduperNotificationSnsCA

  DeduperNotificationSnsGBLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Condition: DeployEastRegionOnly
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt DeduperSnsNotificationToFifoSQSLambda.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref DeduperNotificationSnsGB

  DeduperNotificationSnsIELambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Condition: DeployEastRegionOnly
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt DeduperSnsNotificationToFifoSQSLambda.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref DeduperNotificationSnsIE

  DeduperNotificationSnsSKYUKLambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Condition: DeployEastRegionOnly
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt DeduperSnsNotificationToFifoSQSLambda.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref DeduperNotificationSnsSKYUK

  DeduperNotificationSnsSKYIELambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Condition: DeployEastRegionOnly
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt DeduperSnsNotificationToFifoSQSLambda.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref DeduperNotificationSnsSKYIE



#Temp removing subscription to debug something

  DeduperNotificationLambdaSubscription:
    Type: "AWS::SNS::Subscription"
    Condition: DeployCap20Integration
    Properties:
      Endpoint : !GetAtt DeduperSnsNotificationToFifoSQSLambda.Arn
      Protocol : lambda
      TopicArn : !Ref DeduperOutputNotificationSns

  DeduperOutputNotificationSns:
    Type: "AWS::SNS::Topic"
    Condition: DeployEastRegionOnly
    Properties:
      DisplayName: deduper-output
      #Subscription:
  #        -
  #          Endpoint: !Join [':',["arn:aws:lambda:us-west-2",!Ref "AWS::AccountId","function","DeduperSnsNotificationToFifoSQSLambda"]]
  #          Protocol: "lambda"
#        -
#          Endpoint: !Join [':',["arn:aws:lambda:us-east-1",!Ref "AWS::AccountId","function","DeduperSnsNotificationToFifoSQSLambda"]]
#          Protocol: "lambda"
      TopicName: deduper-output

  DeduperOutputNotificationDlQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      FifoQueue: true
      MessageRetentionPeriod: 345600
      QueueName: deduper-output-dl.fifo
      VisibilityTimeout: 60

  DeduperOutputNotificationQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      ContentBasedDeduplication: true
      FifoQueue: true
      QueueName: deduper-output.fifo
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeduperOutputNotificationDlQueue.Arn
        maxReceiveCount: 3
      VisibilityTimeout: 600


Outputs:
  DeduperNotificationQueueCA:
    Description: SQS queue that notifies when Deduper has completed a job for CA
    Value: !Ref DeduperNotificationQueueCA
    Export:
      Name: deduper:DeduperNotificationQueueCA

  DeduperNotificationQueueGB:
    Description: SQS queue that notifies when Deduper has completed a job for GB
    Value: !Ref DeduperNotificationQueueGB
    Export:
      Name: deduper:DeduperNotificationQueueGB

  DeduperNotificationQueueIE:
    Description: SQS queue that notifies when Deduper has completed a job for IE
    Value: !Ref DeduperNotificationQueueIE
    Export:
      Name: deduper:DeduperNotificationQueueIE

  DeduperNotificationQueueSKYUK:
    Description: SQS queue that notifies when Deduper has completed a job for US
    Value: !Ref DeduperNotificationQueueSKYUK
    Export:
      Name: deduper:DeduperNotificationQueueSKYUK

  DeduperNotificationQueueTELSTRA:
    Description: SQS queue that notifies when Deduper has completed a job for TELSTRA
    Value: !Ref DeduperNotificationQueueTELSTRA
    Export:
      Name: deduper:DeduperNotificationQueueTELSTRA

  DeduperNotificationQueueUS:
    Description: SQS queue that notifies when Deduper has completed a job for US
    Value: !Ref DeduperNotificationQueueUS
    Export:
      Name: deduper:DeduperNotificationQueueUS

  DeduperNotificationSnsCA:
    Condition: DeployEastRegionOnly
    Description: SNS topic that notifies when Deduper has completed a job for CA
    Value: !Ref DeduperNotificationSnsCA
    Export:
      Name: !Sub ${AWS::StackName}-DeduperNotificationSnsCA

  DeduperNotificationSnsGB:
    Condition: DeployEastRegionOnly
    Description: SNS topic that notifies when Deduper has completed a job for GB
    Value: !Ref DeduperNotificationSnsGB
    Export:
      Name: !Sub ${AWS::StackName}-DeduperNotificationSnsGB

  DeduperNotificationSnsIE:
    Condition: DeployEastRegionOnly
    Description: SNS topic that notifies when Deduper has completed a job for IE
    Value: !Ref DeduperNotificationSnsIE
    Export:
      Name: !Sub ${AWS::StackName}-DeduperNotificationSnsIE

  DeduperNotificationSnsSKYUK:
    Condition: DeployEastRegionOnly
    Description: SNS topic that notifies when Deduper has completed a job for US
    Value: !Ref DeduperNotificationSnsSKYUK
    Export:
      Name: !Sub ${AWS::StackName}-DeduperNotificationSnsSKYUK

  DeduperNotificationSnsSKYIE:
    Condition: DeployEastRegionOnly
    Description: SNS topic that notifies when Deduper has completed a job for IE
    Value: !Ref DeduperNotificationSnsSKYIE
    Export:
      Name: !Sub ${AWS::StackName}-DeduperNotificationSnsSKYIE

  DeduperNotificationSnsTELSTRA:
    Condition: DeployEastRegionOnly
    Description: SNS topic that notifies when Deduper has completed a job for TELSTRA
    Value: !Ref DeduperNotificationSnsTELSTRA
    Export:
      Name: !Sub ${AWS::StackName}-DeduperNotificationSnsTELSTRA

  DeduperNotificationSnsUS:
    Condition: DeployEastRegionOnly
    Description: SNS topic that notifies when Deduper has completed a job for US
    Value: !Ref DeduperNotificationSnsUS
    Export:
      Name: !Sub ${AWS::StackName}-DeduperNotificationSnsUS

  DeduperOutputNotificationSns:
    Condition: DeployEastRegionOnly
    Description: SNS topic that notifies when Deduper has completed a job
    Value: !Ref DeduperOutputNotificationSns
    Export:
      Name: !Sub ${AWS::StackName}-DeduperOutputNotificationSns

  ProviderIndexerSns:
    Condition: DeployEastRegionOnly
    Description: SNS topic that notifies when s3 has a new provider feed written for titan
    Value: !Ref ProviderIndexerSns
    Export:
      Name: !Sub ${AWS::StackName}-ProviderIndexerSns

  ProviderIndexerQueue:
    Description: SQS queue that notifies when a new feed has been written to s3
    Value: !Ref ProviderIndexerQueue
    Export:
      Name: !Sub ${AWS::StackName}-ProviderIndexerQueue

  CapIngestorQueue:
    Description: SQS queue that hosts messages when a new feed has been written to s3. This queue is for the purpose of CAP services
    Value: !Ref CapIngestorQueue
    Export:
      Name: !Sub ${AWS::StackName}-CapIngestorQueue
